import { Component, ContentChild, EventEmitter, HostBinding, Input, Output, ViewChild, ElementRef, Inject, HostListener, NgModuleRef, Injector, ContentChildren, LOCALE_ID, Renderer2, Optional } from '@angular/core';
import { NG_VALUE_ACCESSOR, NgControl, NG_VALIDATORS } from '@angular/forms';
import { IgxCalendarHeaderTemplateDirective, IgxCalendarSubheaderTemplateDirective, WEEKDAYS, isDateInRanges } from '../calendar/public_api';
import { IgxInputDirective, IgxInputGroupComponent, IgxLabelDirective, IGX_INPUT_GROUP_TYPE, IgxInputState } from '../input-group/public_api';
import { fromEvent, noop } from 'rxjs';
import { filter, takeUntil } from 'rxjs/operators';
import { IgxOverlayService, AbsoluteScrollStrategy, AutoPositionStrategy } from '../services/public_api';
import { CurrentResourceStrings } from '../core/i18n/resources';
import { DateRangeType } from '../core/dates/dateRange';
import { PlatformUtil, isDate } from '../core/utils';
import { IgxCalendarContainerComponent } from '../date-common/calendar-container/calendar-container.component';
import { fadeIn, fadeOut } from '../animations/fade';
import { PickerBaseDirective } from '../date-common/picker-base.directive';
import { DisplayDensityToken } from '../core/density';
import { IgxDateTimeEditorDirective } from '../directives/date-time-editor/public_api';
import { DateTimeUtil } from '../date-common/util/date-time.util';
import { PickerHeaderOrientation as PickerHeaderOrientation } from '../date-common/types';
import { IgxPickerClearComponent, IgxPickerActionsDirective } from '../date-common/public_api';
let NEXT_ID = 0;
/**
 * Date Picker displays a popup calendar that lets users select a single date.
 *
 * @igxModule IgxDatePickerModule
 * @igxTheme igx-calendar-theme, igx-icon-theme
 * @igxGroup Scheduling
 * @igxKeywords datepicker, calendar, schedule, date
 * @example
 * ```html
 * <igx-date-picker [(ngModel)]="selectedDate"></igx-date-picker>
 * ```
 */
export class IgxDatePickerComponent extends PickerBaseDirective {
    constructor(element, _localeId, _overlayService, _moduleRef, _injector, _renderer, platform, _displayDensityOptions, _inputGroupType) {
        super(element, _localeId, _displayDensityOptions, _inputGroupType);
        this.element = element;
        this._localeId = _localeId;
        this._overlayService = _overlayService;
        this._moduleRef = _moduleRef;
        this._injector = _injector;
        this._renderer = _renderer;
        this.platform = platform;
        this._displayDensityOptions = _displayDensityOptions;
        this._inputGroupType = _inputGroupType;
        /**
         * Gets/Sets on which day the week starts.
         *
         * @example
         * ```html
         * <igx-date-picker [weekStart]="4" cancelButtonLabel="cancel" todayButtonLabel="today"></igx-date-picker>
         * ```
         */
        this.weekStart = WEEKDAYS.SUNDAY;
        /**
         * Gets/Sets the number of month views displayed.
         *
         * @remarks
         * Default value is `1`.
         *
         * @example
         * ```html
         * <igx-date-picker [displayMonthsCount]="2"></igx-date-picker>
         * ```
         * @example
         * ```typescript
         * let monthViewsDisplayed = this.datePicker.displayMonthsCount;
         * ```
         */
        this.displayMonthsCount = 1;
        /**
         * Gets/Sets the orientation of the `IgxDatePickerComponent` header.
         *
         *  @example
         * ```html
         * <igx-date-picker headerOrientation="vertical"></igx-date-picker>
         * ```
         */
        this.headerOrientation = PickerHeaderOrientation.Horizontal;
        /**
         * Specify if the currently spun date segment should loop over.
         *
         *  @example
         * ```html
         * <igx-date-picker [spinLoop]="false"></igx-date-picker>
         * ```
         */
        this.spinLoop = true;
        /**
         * Gets/Sets the value of `id` attribute.
         *
         * @remarks If not provided it will be automatically generated.
         * @example
         * ```html
         * <igx-date-picker [id]="'igx-date-picker-3'" cancelButtonLabel="cancel" todayButtonLabel="today"></igx-date-picker>
         * ```
         */
        this.id = `igx-date-picker-${NEXT_ID++}`;
        /** @hidden @internal */
        this.readOnly = false;
        /**
         * Emitted when the picker's value changes.
         *
         * @remarks
         * Used for `two-way` bindings.
         *
         * @example
         * ```html
         * <igx-date-picker [(value)]="date"></igx-date-picker>
         * ```
         */
        this.valueChange = new EventEmitter();
        /**
         * Emitted when the user types/spins invalid date in the date-picker editor.
         *
         *  @example
         * ```html
         * <igx-date-picker (validationFailed)="onValidationFailed($event)"></igx-date-picker>
         * ```
         */
        this.validationFailed = new EventEmitter();
        /** @hidden @internal */
        this.displayValue = { transform: (date) => this.formatter(date) };
        this._resourceStrings = CurrentResourceStrings.DatePickerResourceStrings;
        this._ngControl = null;
        this._specialDates = null;
        this._disabledDates = null;
        this._overlaySubFilter = [
            filter(x => x.id === this._overlayId),
            takeUntil(this._destroy$)
        ];
        this._dropDownOverlaySettings = {
            target: this.inputGroupElement,
            closeOnOutsideClick: true,
            modal: false,
            closeOnEscape: true,
            scrollStrategy: new AbsoluteScrollStrategy(),
            positionStrategy: new AutoPositionStrategy({
                openAnimation: fadeIn,
                closeAnimation: fadeOut
            })
        };
        this._dialogOverlaySettings = {
            closeOnOutsideClick: true,
            modal: true,
            closeOnEscape: true
        };
        this._calendarFormat = {
            day: 'numeric',
            month: 'short',
            weekday: 'short',
            year: 'numeric'
        };
        this._defFormatViews = {
            day: false,
            month: true,
            year: false
        };
        this._onChangeCallback = noop;
        this._onTouchedCallback = noop;
        this._onValidatorChange = noop;
        this.onStatusChanged = () => {
            this.updateValidity();
            this.inputGroup.isRequired = this.required;
        };
    }
    /**
     * Gets/Sets the disabled dates descriptors.
     *
     * @example
     * ```typescript
     * let disabledDates = this.datepicker.disabledDates;
     * this.datePicker.disabledDates = [ {type: DateRangeType.Weekends}, ...];
     * ```
     */
    get disabledDates() {
        return this._disabledDates;
    }
    set disabledDates(value) {
        this._disabledDates = value;
        this._onValidatorChange();
    }
    /**
     * Gets/Sets the special dates descriptors.
     *
     * @example
     * ```typescript
     * let specialDates = this.datepicker.specialDates;
     * this.datePicker.specialDates = [ {type: DateRangeType.Weekends}, ... ];
     * ```
     */
    get specialDates() {
        return this._specialDates;
    }
    set specialDates(value) {
        this._specialDates = value;
    }
    //#endregion
    /**
     * Gets/Sets the selected date.
     *
     *  @example
     * ```html
     * <igx-date-picker [value]="date"></igx-date-picker>
     * ```
     */
    get value() {
        return this._value;
    }
    set value(date) {
        this._value = date;
        this.setDateValue(date);
        if (this.dateTimeEditor.value !== date) {
            this.dateTimeEditor.value = this._dateValue;
        }
        this.valueChange.emit(this.dateValue);
        this._onChangeCallback(this.dateValue);
    }
    /**
     * The minimum value the picker will accept.
     *
     * @example
     * <igx-date-picker [minValue]="minDate"></igx-date-picker>
     */
    set minValue(value) {
        this._minValue = value;
        this._onValidatorChange();
    }
    get minValue() {
        return this._minValue;
    }
    /**
     * The maximum value the picker will accept.
     *
     * @example
     * <igx-date-picker [maxValue]="maxDate"></igx-date-picker>
     */
    set maxValue(value) {
        this._maxValue = value;
        this._onValidatorChange();
    }
    get maxValue() {
        return this._maxValue;
    }
    get dialogOverlaySettings() {
        return Object.assign({}, this._dialogOverlaySettings, this.overlaySettings);
    }
    get dropDownOverlaySettings() {
        return Object.assign({}, this._dropDownOverlaySettings, this.overlaySettings);
    }
    get inputGroupElement() {
        var _a;
        return (_a = this.inputGroup) === null || _a === void 0 ? void 0 : _a.element.nativeElement;
    }
    get dateValue() {
        return this._dateValue;
    }
    get pickerFormatViews() {
        return Object.assign({}, this._defFormatViews, this.formatViews);
    }
    get pickerCalendarFormat() {
        return Object.assign({}, this._calendarFormat, this.calendarFormat);
    }
    /** @hidden @internal */
    get required() {
        if (this._ngControl && this._ngControl.control && this._ngControl.control.validator) {
            // Run the validation with empty object to check if required is enabled.
            const error = this._ngControl.control.validator({});
            return error && error.required;
        }
        return false;
    }
    /** @hidden @internal */
    get pickerResourceStrings() {
        return Object.assign({}, this._resourceStrings, this.resourceStrings);
    }
    /** @hidden @internal */
    onKeyDown(event) {
        switch (event.key) {
            case this.platform.KEYMAP.ARROW_UP:
                if (event.altKey) {
                    this.close();
                }
                break;
            case this.platform.KEYMAP.ARROW_DOWN:
                if (event.altKey) {
                    this.open();
                }
                break;
            case this.platform.KEYMAP.SPACE:
                event.preventDefault();
                this.open();
                break;
        }
    }
    /**
     * Opens the picker's dropdown or dialog.
     *
     * @example
     * ```html
     * <igx-date-picker #picker></igx-date-picker>
     *
     * <button (click)="picker.open()">Open Dialog</button>
     * ```
     */
    open(settings) {
        if (!this.collapsed || this.disabled) {
            return;
        }
        const overlaySettings = Object.assign({}, this.isDropdown
            ? this.dropDownOverlaySettings
            : this.dialogOverlaySettings, settings);
        if (this.isDropdown && this.inputGroupElement) {
            overlaySettings.target = this.inputGroupElement;
        }
        if (this.outlet) {
            overlaySettings.outlet = this.outlet;
        }
        this._overlayId = this._overlayService
            .attach(IgxCalendarContainerComponent, overlaySettings, this._moduleRef);
        this._overlayService.show(this._overlayId);
    }
    /**
     * Toggles the picker's dropdown or dialog
     *
     * @example
     * ```html
     * <igx-date-picker #picker></igx-date-picker>
     *
     * <button (click)="picker.toggle()">Toggle Dialog</button>
     * ```
     */
    toggle(settings) {
        if (this.collapsed) {
            this.open(settings);
        }
        else {
            this.close();
        }
    }
    /**
     * Closes the picker's dropdown or dialog.
     *
     * @example
     * ```html
     * <igx-date-picker #picker></igx-date-picker>
     *
     * <button (click)="picker.close()">Close Dialog</button>
     * ```
     */
    close() {
        if (!this.collapsed) {
            this._overlayService.hide(this._overlayId);
        }
    }
    /**
     * Selects a date.
     *
     * @remarks Updates the value in the input field.
     *
     * @example
     * ```typescript
     * this.datePicker.select(date);
     * ```
     * @param date passed date that has to be set to the calendar.
     */
    select(value) {
        this.value = value;
    }
    /**
     * Selects today's date and closes the picker.
     *
     * @example
     * ```html
     * <igx-date-picker #picker></igx-date-picker>
     *
     * <button (click)="picker.selectToday()">Select Today</button>
     * ```
     * */
    selectToday() {
        const today = new Date();
        today.setHours(0);
        today.setMinutes(0);
        today.setSeconds(0);
        today.setMilliseconds(0);
        this.select(today);
        this.close();
    }
    /**
     * Clears the input field and the picker's value.
     *
     * @example
     * ```typescript
     * this.datePicker.clear();
     * ```
     */
    clear() {
        var _a;
        if (!this.disabled) {
            (_a = this._calendar) === null || _a === void 0 ? void 0 : _a.deselectDate();
            this.dateTimeEditor.clear();
        }
    }
    /**
     * Increment a specified `DatePart`.
     *
     * @param datePart The optional DatePart to increment. Defaults to Date.
     * @param delta The optional delta to increment by. Overrides `spinDelta`.
     * @example
     * ```typescript
     * this.datePicker.increment(DatePart.Date);
     * ```
     */
    increment(datePart, delta) {
        this.dateTimeEditor.increment(datePart, delta);
    }
    /**
     * Decrement a specified `DatePart`
     *
     * @param datePart The optional DatePart to decrement. Defaults to Date.
     * @param delta The optional delta to decrement by. Overrides `spinDelta`.
     * @example
     * ```typescript
     * this.datePicker.decrement(DatePart.Date);
     * ```
     */
    decrement(datePart, delta) {
        this.dateTimeEditor.decrement(datePart, delta);
    }
    //#region Control Value Accessor
    /** @hidden @internal */
    writeValue(value) {
        this._value = value;
        this.setDateValue(value);
        if (this.dateTimeEditor.value !== value) {
            this.dateTimeEditor.value = this._dateValue;
        }
    }
    /** @hidden @internal */
    registerOnChange(fn) {
        this._onChangeCallback = fn;
    }
    /** @hidden @internal */
    registerOnTouched(fn) {
        this._onTouchedCallback = fn;
    }
    /** @hidden @internal */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    //#endregion
    //#region Validator
    /** @hidden @internal */
    registerOnValidatorChange(fn) {
        this._onValidatorChange = fn;
    }
    /** @hidden @internal */
    validate(control) {
        if (!control.value) {
            return null;
        }
        // InvalidDate handling
        if (isDate(control.value) && !DateTimeUtil.isValidDate(control.value)) {
            return { value: true };
        }
        const errors = {};
        const value = DateTimeUtil.isValidDate(control.value) ? control.value : DateTimeUtil.parseIsoDate(control.value);
        if (value && this.disabledDates && isDateInRanges(value, this.disabledDates)) {
            Object.assign(errors, { dateIsDisabled: true });
        }
        Object.assign(errors, DateTimeUtil.validateMinMax(value, this.minValue, this.maxValue, false));
        return Object.keys(errors).length > 0 ? errors : null;
    }
    //#endregion
    /** @hidden @internal */
    ngOnInit() {
        this._ngControl = this._injector.get(NgControl, null);
    }
    /** @hidden @internal */
    ngAfterViewInit() {
        super.ngAfterViewInit();
        this.subscribeToClick();
        this.subscribeToOverlayEvents();
        this.subscribeToDateEditorEvents();
        this.subToIconsClicked(this.clearComponents, () => this.clear());
        this.clearComponents.changes.pipe(takeUntil(this._destroy$))
            .subscribe(() => this.subToIconsClicked(this.clearComponents, () => this.clear()));
        this._dropDownOverlaySettings.excludeFromOutsideClick = [this.inputGroup.element.nativeElement];
        fromEvent(this.inputDirective.nativeElement, 'blur')
            .pipe(takeUntil(this._destroy$))
            .subscribe(() => {
            if (this.collapsed) {
                this._onTouchedCallback();
                this.updateValidity();
            }
        });
        if (this._ngControl) {
            this._statusChanges$ =
                this._ngControl.statusChanges.subscribe(this.onStatusChanged.bind(this));
        }
    }
    /** @hidden @internal */
    ngAfterViewChecked() {
        if (this.labelDirective) {
            this._renderer.setAttribute(this.inputDirective.nativeElement, 'aria-labelledby', this.labelDirective.id);
        }
    }
    /** @hidden @internal */
    ngOnDestroy() {
        super.ngOnDestroy();
        if (this._statusChanges$) {
            this._statusChanges$.unsubscribe();
        }
        if (this._overlayId) {
            this._overlayService.detach(this._overlayId);
        }
    }
    /** @hidden @internal */
    getEditElement() {
        return this.inputDirective.nativeElement;
    }
    subscribeToClick() {
        fromEvent(this.getEditElement(), 'click')
            .pipe(takeUntil(this._destroy$))
            .subscribe(() => {
            if (!this.isDropdown) {
                this.toggle();
            }
        });
    }
    setDateValue(value) {
        if (isDate(value) && isNaN(value.getTime())) {
            this._dateValue = value;
            return;
        }
        this._dateValue = DateTimeUtil.isValidDate(value) ? value : DateTimeUtil.parseIsoDate(value);
    }
    updateValidity() {
        // B.P. 18 May 2021: IgxDatePicker does not reset its state upon resetForm #9526
        if (this._ngControl && !this.disabled && this.isTouchedOrDirty) {
            if (this.inputGroup.isFocused) {
                this.inputDirective.valid = this._ngControl.valid
                    ? IgxInputState.VALID
                    : IgxInputState.INVALID;
            }
            else {
                this.inputDirective.valid = this._ngControl.valid
                    ? IgxInputState.INITIAL
                    : IgxInputState.INVALID;
            }
        }
        else {
            this.inputDirective.valid = IgxInputState.INITIAL;
        }
    }
    get isTouchedOrDirty() {
        return (this._ngControl.control.touched || this._ngControl.control.dirty)
            && (!!this._ngControl.control.validator || !!this._ngControl.control.asyncValidator);
    }
    handleSelection(date) {
        if (this.dateValue && DateTimeUtil.isValidDate(this.dateValue)) {
            date.setHours(this.dateValue.getHours());
            date.setMinutes(this.dateValue.getMinutes());
            date.setSeconds(this.dateValue.getSeconds());
            date.setMilliseconds(this.dateValue.getMilliseconds());
        }
        this.value = date;
        this._calendar.viewDate = date;
        this.close();
    }
    subscribeToDateEditorEvents() {
        this.dateTimeEditor.valueChange.pipe(takeUntil(this._destroy$)).subscribe(val => {
            this.value = val;
        });
        this.dateTimeEditor.validationFailed.pipe(takeUntil(this._destroy$)).subscribe((event) => {
            this.validationFailed.emit({
                owner: this,
                prevValue: event.oldValue,
                currentValue: this.value
            });
        });
    }
    subscribeToOverlayEvents() {
        this._overlayService.onOpening.pipe(...this._overlaySubFilter).subscribe((eventArgs) => {
            const args = { owner: this, event: eventArgs.event, cancel: eventArgs.cancel };
            this.opening.emit(args);
            eventArgs.cancel = args.cancel;
            if (args.cancel) {
                this._overlayService.detach(this._overlayId);
                return;
            }
            this._initializeCalendarContainer(eventArgs.componentRef.instance);
            this._collapsed = false;
        });
        this._overlayService.onOpened.pipe(...this._overlaySubFilter).subscribe((_eventArgs) => {
            var _a, _b, _c, _d, _e, _f, _g;
            const args = { owner: this };
            this.opened.emit(args);
            if ((_b = (_a = this._calendar) === null || _a === void 0 ? void 0 : _a.daysView) === null || _b === void 0 ? void 0 : _b.selectedDates) {
                (_d = (_c = this._calendar) === null || _c === void 0 ? void 0 : _c.daysView) === null || _d === void 0 ? void 0 : _d.focusActiveDate();
                return;
            }
            if (this._targetViewDate) {
                this._targetViewDate.setHours(0, 0, 0, 0);
                (_g = (_f = (_e = this._calendar) === null || _e === void 0 ? void 0 : _e.daysView) === null || _f === void 0 ? void 0 : _f.dates.find(d => d.date.date.getTime() === this._targetViewDate.getTime())) === null || _g === void 0 ? void 0 : _g.nativeElement.focus();
            }
        });
        this._overlayService.onClosing.pipe(...this._overlaySubFilter).subscribe((eventArgs) => {
            const args = { owner: this, event: eventArgs.event, cancel: eventArgs.cancel };
            this.closing.emit(args);
            eventArgs.cancel = args.cancel;
            if (args.cancel) {
                return;
            }
            // do not focus the input if clicking outside in dropdown mode
            if (this.getEditElement() && !(args.event && this.isDropdown)) {
                this.inputDirective.focus();
            }
            else {
                this._onTouchedCallback();
                this.updateValidity();
            }
        });
        this._overlayService.onClosed.pipe(...this._overlaySubFilter).subscribe((_event) => {
            const args = { owner: this };
            this.closed.emit(args);
            this._overlayService.detach(this._overlayId);
            this._collapsed = true;
            this._overlayId = null;
        });
    }
    getMinMaxDates() {
        const minValue = DateTimeUtil.isValidDate(this.minValue) ? this.minValue : DateTimeUtil.parseIsoDate(this.minValue);
        const maxValue = DateTimeUtil.isValidDate(this.maxValue) ? this.maxValue : DateTimeUtil.parseIsoDate(this.maxValue);
        return { minValue, maxValue };
    }
    setDisabledDates() {
        this._calendar.disabledDates = this.disabledDates ? [...this.disabledDates] : [];
        const { minValue, maxValue } = this.getMinMaxDates();
        if (minValue) {
            this._calendar.disabledDates.push({ type: DateRangeType.Before, dateRange: [minValue] });
        }
        if (maxValue) {
            this._calendar.disabledDates.push({ type: DateRangeType.After, dateRange: [maxValue] });
        }
    }
    _initializeCalendarContainer(componentInstance) {
        this._calendar = componentInstance.calendar;
        const isVertical = this.headerOrientation === PickerHeaderOrientation.Vertical;
        this._calendar.hasHeader = !this.isDropdown;
        this._calendar.formatOptions = this.pickerCalendarFormat;
        this._calendar.formatViews = this.pickerFormatViews;
        this._calendar.locale = this.locale;
        this._calendar.vertical = isVertical;
        this._calendar.weekStart = this.weekStart;
        this._calendar.specialDates = this.specialDates;
        this._calendar.headerTemplate = this.headerTemplate;
        this._calendar.subheaderTemplate = this.subheaderTemplate;
        this._calendar.hideOutsideDays = this.hideOutsideDays;
        this._calendar.monthsViewNumber = this.displayMonthsCount;
        this._calendar.showWeekNumbers = this.showWeekNumbers;
        this._calendar.selected.pipe(takeUntil(this._destroy$)).subscribe((ev) => this.handleSelection(ev));
        this.setDisabledDates();
        if (DateTimeUtil.isValidDate(this.dateValue)) {
            // calendar will throw if the picker's value is InvalidDate #9208
            this._calendar.value = this.dateValue;
        }
        this.setCalendarViewDate();
        componentInstance.mode = this.mode;
        componentInstance.vertical = isVertical;
        componentInstance.closeButtonLabel = this.cancelButtonLabel;
        componentInstance.todayButtonLabel = this.todayButtonLabel;
        componentInstance.pickerActions = this.pickerActions;
        componentInstance.calendarClose.pipe(takeUntil(this._destroy$)).subscribe(() => this.close());
        componentInstance.todaySelection.pipe(takeUntil(this._destroy$)).subscribe(() => this.selectToday());
    }
    setCalendarViewDate() {
        const { minValue, maxValue } = this.getMinMaxDates();
        this._dateValue = this.dateValue || new Date();
        if (minValue && DateTimeUtil.lessThanMinValue(this.dateValue, minValue)) {
            this._calendar.viewDate = this._targetViewDate = minValue;
            return;
        }
        if (maxValue && DateTimeUtil.greaterThanMaxValue(this.dateValue, maxValue)) {
            this._calendar.viewDate = this._targetViewDate = maxValue;
            return;
        }
        this._calendar.viewDate = this._targetViewDate = this.dateValue;
    }
}
IgxDatePickerComponent.decorators = [
    { type: Component, args: [{
                providers: [
                    { provide: NG_VALUE_ACCESSOR, useExisting: IgxDatePickerComponent, multi: true },
                    { provide: NG_VALIDATORS, useExisting: IgxDatePickerComponent, multi: true }
                ],
                selector: 'igx-date-picker',
                template: "<igx-input-group [displayDensity]=\"this.displayDensity\" [type]=\"this.type\" [suppressInputAutofocus]=\"true\">\n    <igx-prefix *ngIf=\"!this.toggleComponents.length\" (click)=\"this.toggle()\">\n        <igx-icon [title]=\"this.value\n            ? pickerResourceStrings.igx_date_picker_change_date\n            : pickerResourceStrings.igx_date_picker_choose_date\">today</igx-icon>\n    </igx-prefix>\n\n    <input class=\"igx-date-picker__input-date\" [displayValuePipe]=\"this.formatter ? displayValue : null\" igxInput\n        [igxDateTimeEditor]=\"this.inputFormat\" [minValue]=\"this.minValue\" [maxValue]=\"this.maxValue\"\n        [spinDelta]=\"this.spinDelta\" [spinLoop]=\"this.spinLoop\" [displayFormat]=\"this.displayFormat\"\n        [disabled]=\"this.disabled\" [placeholder]=\"this.placeholder\" [readonly]=\"!this.isDropdown || this.readOnly\"\n        [igxTextSelection]=\"this.isDropdown && !this.readOnly\" [locale]=\"this.locale\" [attr.aria-expanded]=\"!this.collapsed\"\n        [attr.aria-labelledby]=\"this.label?.id\" aria-haspopup=\"dialog\" aria-autocomplete=\"none\" role=\"combobox\">\n\n    <igx-suffix *ngIf=\"!this.clearComponents.length && this.value\" (click)=\"this.clear()\">\n        <igx-icon>clear</igx-icon>\n    </igx-suffix>\n\n    <ng-container ngProjectAs=\"[igxLabel]\">\n        <ng-content select=\"[igxLabel]\"></ng-content>\n    </ng-container>\n    <ng-container ngProjectAs=\"igx-prefix\">\n        <ng-content select=\"igx-prefix,[igxPrefix]\"></ng-content>\n    </ng-container>\n    <ng-container ngProjectAs=\"igx-suffix\">\n        <ng-content select=\"igx-suffix,[igxSuffix]\"></ng-content>\n    </ng-container>\n    <ng-container ngProjectAs=\"igx-hint\">\n        <ng-content select=\"igx-hint,[igxHint]\"></ng-content>\n    </ng-container>\n</igx-input-group>\n",
                styles: [':host { display: block; }']
            },] }
];
IgxDatePickerComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] },
    { type: IgxOverlayService, decorators: [{ type: Inject, args: [IgxOverlayService,] }] },
    { type: NgModuleRef },
    { type: Injector },
    { type: Renderer2 },
    { type: PlatformUtil },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DisplayDensityToken,] }] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [IGX_INPUT_GROUP_TYPE,] }] }
];
IgxDatePickerComponent.propDecorators = {
    weekStart: [{ type: Input }],
    hideOutsideDays: [{ type: Input }],
    displayMonthsCount: [{ type: Input }],
    showWeekNumbers: [{ type: Input }],
    formatter: [{ type: Input }],
    headerOrientation: [{ type: Input }],
    todayButtonLabel: [{ type: Input }],
    cancelButtonLabel: [{ type: Input }],
    spinLoop: [{ type: Input }],
    spinDelta: [{ type: Input }],
    outlet: [{ type: Input }],
    id: [{ type: Input }, { type: HostBinding, args: ['attr.id',] }],
    formatViews: [{ type: Input }],
    disabledDates: [{ type: Input }],
    specialDates: [{ type: Input }],
    calendarFormat: [{ type: Input }],
    value: [{ type: Input }],
    minValue: [{ type: Input }],
    maxValue: [{ type: Input }],
    resourceStrings: [{ type: Input }],
    readOnly: [{ type: Input }],
    valueChange: [{ type: Output }],
    validationFailed: [{ type: Output }],
    clearComponents: [{ type: ContentChildren, args: [IgxPickerClearComponent,] }],
    label: [{ type: ContentChild, args: [IgxLabelDirective,] }],
    headerTemplate: [{ type: ContentChild, args: [IgxCalendarHeaderTemplateDirective,] }],
    dateTimeEditor: [{ type: ViewChild, args: [IgxDateTimeEditorDirective, { static: true },] }],
    inputGroup: [{ type: ViewChild, args: [IgxInputGroupComponent,] }],
    labelDirective: [{ type: ViewChild, args: [IgxLabelDirective,] }],
    inputDirective: [{ type: ViewChild, args: [IgxInputDirective,] }],
    subheaderTemplate: [{ type: ContentChild, args: [IgxCalendarSubheaderTemplateDirective,] }],
    pickerActions: [{ type: ContentChild, args: [IgxPickerActionsDirective,] }],
    onKeyDown: [{ type: HostListener, args: ['keydown', ['$event'],] }]
};
//# sourceMappingURL=data:application/json;base64,