{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/user/OneDrive/\\u05DE\\u05E1\\u05DE\\u05DB\\u05D9\\u05DD/fullstack/ANGULAR/SECONDRESTORE/Front/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport OrderModel from 'src/app/models/order.model';\nimport store from 'src/app/redux/store';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { OrderSuccessDialogComponent } from '../order-success-dialog/order-success-dialog.component'; // import { DatePipe } from '@angular/common';\n// import {MatDialog, MatDialogRef, MAT_DIALOG_DATA} from '@angular/material/dialog';\n// import { OrderBoxComponent } from '../order-box/order-box.component';\n// export interface DialogData {\n//   sure: string;\n// }\n\nlet OrderSubmitComponent = class OrderSubmitComponent {\n  constructor(myActivatedRoute, myItemService, myCartService, myOrdersService, myCityService, notify, myRouter, dialog) {\n    this.myActivatedRoute = myActivatedRoute;\n    this.myItemService = myItemService;\n    this.myCartService = myCartService;\n    this.myOrdersService = myOrdersService;\n    this.myCityService = myCityService;\n    this.notify = notify;\n    this.myRouter = myRouter;\n    this.dialog = dialog;\n    this.order = new OrderModel();\n    this.today = new Date();\n    this.myBookedDates = []; // blocks dates with 3 deliveries from datepicker\n\n    this.myFilter = d => {\n      return !this.myBookedDates.find(x => x.getTime() == d.getTime());\n    };\n\n    this.cityControl = new FormControl(null, [Validators.required]);\n    this.streetControl = new FormControl(null, Validators.required);\n    this.deliveryControl = new FormControl(null, [Validators.required]); // matches Visa, MasterCard, American Express, Diners Club, Discover, and JCB cards:\n    // there is one more updated here? https://regex101.com/r/37S1iV/1\n\n    this.creditControl = new FormControl(null, [Validators.required, Validators.pattern(\"^(?:4[0-9]{12}(?:[0-9]{3})?|[25][1-7][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11})$\")]);\n    this.orderForm = new FormGroup({\n      cityControl: this.cityControl,\n      streetControl: this.streetControl,\n      deliveryControl: this.deliveryControl,\n      creditControl: this.creditControl\n    });\n  }\n\n  ngOnInit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.unsubscribeMe = store.subscribe(() => {\n        _this.user = store.getState().authState.user;\n      });\n\n      if (JSON.parse(localStorage.getItem('user'))) {\n        _this.user = store.getState().authState.user;\n      }\n\n      const uuid = _this.user.uuid;\n\n      try {\n        _this.cart = yield _this.myCartService.getLastCartByUser(uuid);\n      } catch (err) {// this.notify.error(err);\n      }\n\n      try {\n        _this.cities = yield _this.myCityService.getAllCities();\n      } catch (err) {// this.notify.error(err);\n      }\n\n      try {\n        _this.items = yield _this.myItemService.getOpenCartItems(_this.cart[0].CartID);\n      } catch (err) {// this.notify.error(err);\n      }\n\n      try {\n        _this.bookedDates = yield _this.myOrdersService.getFullyBookedDates();\n      } catch (err) {// this.notify.error(err);\n      }\n\n      for (let date of _this.bookedDates) {\n        const dateObj = new Date(date.Delivery);\n\n        _this.myBookedDates.push(dateObj);\n      }\n    })();\n  }\n\n  ngOnDestroy() {\n    this.unsubscribeMe();\n  }\n\n  dblstreet() {\n    this.streetControl.setValue(this.user.street);\n  }\n\n  submit() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const answer = confirm(\"Are you sure you want to ship your order?\");\n      if (!answer) return;\n\n      try {\n        _this2.order.UserUUID = _this2.user.uuid;\n        _this2.order.CartID = _this2.cart[0].CartID;\n        _this2.order.TotalPrice = _this2.myItemService.totalCartPerUser(_this2.items);\n        _this2.order.Date = new Date().toString();\n        _this2.order.City = _this2.cityControl.value;\n        _this2.order.Street = _this2.streetControl.value;\n        _this2.order.Delivery = _this2.deliveryControl.value.toDateString();\n        _this2.order.CreditCard = _this2.creditControl.value.slice(-4);\n        yield _this2.myOrdersService.addOrder(_this2.order); //// MUST SEPERATE IT INTO DIFFERENT FUNCTION LIKE IN PRODUCT-CARD-COMPONENT\n        // this.notify.success(\"Order has been added.\");\n      } catch (err) {// this.notify.error(err);\n      }\n\n      _this2.openDialog();\n    })();\n  }\n\n  openDialog() {\n    const dialogRef = this.dialog.open(OrderSuccessDialogComponent, {});\n    dialogRef.afterClosed().subscribe( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (result) {});\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n  }\n\n};\nOrderSubmitComponent = __decorate([Component({\n  selector: 'app-order-submit',\n  templateUrl: './order-submit.component.html',\n  styleUrls: ['./order-submit.component.css'],\n  styles: []\n})], OrderSubmitComponent);\nexport { OrderSubmitComponent };","map":{"version":3,"sources":["C:\\Users\\user\\OneDrive\\מסמכים\\fullstack\\ANGULAR\\SECONDRESTORE\\Front\\src\\app\\components\\order-area\\order-submit\\order-submit.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, NgModule, OnDestroy, OnInit } from '@angular/core';\nimport OrderModel from 'src/app/models/order.model';\nimport { MatInputModule } from \"@angular/material/input\";\nimport UserModel from 'src/app/models/user.model';\nimport { Unsubscribe } from 'redux';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { OrderService } from 'src/app/services/order.service';\nimport { NotifyService } from 'src/app/services/notify.service';\nimport store from 'src/app/redux/store';\nimport { AbstractControl, FormControl, FormGroup, ValidationErrors, ValidatorFn, Validators } from '@angular/forms';\nimport { OrderSuccessDialogComponent } from '../order-success-dialog/order-success-dialog.component';\nimport { MatDialog } from '@angular/material/dialog';\nimport CityModel from 'src/app/models/city.model';\nimport { CityService } from 'src/app/services/city.service';\nimport ItemModel from 'src/app/models/item.model';\nimport { CartsService } from 'src/app/services/carts.service';\nimport CartModel from 'src/app/models/cart.model';\nimport { ItemService } from 'src/app/services/item.service';\n// import { DatePipe } from '@angular/common';\n// import {MatDialog, MatDialogRef, MAT_DIALOG_DATA} from '@angular/material/dialog';\n// import { OrderBoxComponent } from '../order-box/order-box.component';\n\n\n// export interface DialogData {\n//   sure: string;\n// }\n\n\n\n@Component({\n  selector: 'app-order-submit',\n  templateUrl: './order-submit.component.html',\n  styleUrls: ['./order-submit.component.css']\n})\n\nexport class OrderSubmitComponent implements OnInit, OnDestroy {\n\n  public order = new OrderModel();\n  public user: UserModel;\n  public cart: CartModel[];\n  private unsubscribeMe: Unsubscribe;\n  private items: ItemModel[];\n  public today: Date = new Date();\n\n  private bookedDates: Array<{Delivery: Date, count: number}>;\n  private myBookedDates: Date[] = [];\n\n  public orderForm: FormGroup;\n  public cityControl: FormControl;\n  public streetControl: FormControl;\n  public deliveryControl: FormControl;\n  public creditControl: FormControl;\n  public sure: Boolean;\n  public cities: CityModel[];\n\n\n    constructor(\n      private myActivatedRoute: ActivatedRoute, \n      private myItemService: ItemService,\n      private myCartService: CartsService,\n      private myOrdersService: OrderService, \n      private myCityService: CityService,\n      private notify: NotifyService, \n      private myRouter: Router,\n      public dialog : MatDialog\n      ) {  \n        this.cityControl = new FormControl(null, [Validators.required]);\n        this.streetControl = new FormControl(null, Validators.required);\n        this.deliveryControl = new FormControl(null, [Validators.required]);\n        // matches Visa, MasterCard, American Express, Diners Club, Discover, and JCB cards:\n        // there is one more updated here? https://regex101.com/r/37S1iV/1\n        this.creditControl = new FormControl(null, [Validators.required, Validators.pattern(\"^(?:4[0-9]{12}(?:[0-9]{3})?|[25][1-7][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11})$\")]);\n        this.orderForm = new FormGroup({\n            cityControl: this.cityControl,\n            streetControl: this.streetControl,\n            deliveryControl: this.deliveryControl,\n            creditControl: this.creditControl\n          });\n        }\n\n        async ngOnInit() {\n          this.unsubscribeMe = store.subscribe(() => {\n              this.user = store.getState().authState.user;\n          });\n\n          if (JSON.parse(localStorage.getItem('user'))) {\n              this.user = store.getState().authState.user;\n          }\n\n          const uuid = this.user.uuid;\n          try {\n            this.cart = await this.myCartService.getLastCartByUser(uuid);   \n          } catch (err) {\n              // this.notify.error(err);\n          }\n\n          try {\n                this.cities = await this.myCityService.getAllCities();\n          }  catch (err) {\n                // this.notify.error(err);\n          }\n\n          try {\n            this.items = await this.myItemService.getOpenCartItems(this.cart[0].CartID);     \n          } catch (err) {\n              // this.notify.error(err);\n          }\n\n          try {\n            this.bookedDates = await this.myOrdersService.getFullyBookedDates()\n          }  catch (err) {\n                // this.notify.error(err);\n          }\n\n          for (let date of this.bookedDates) {\n            const dateObj = new Date(date.Delivery)\n            this.myBookedDates.push(dateObj);\n          }\n  }\n\n  ngOnDestroy(): void {\n      this.unsubscribeMe();\n  }\n\n  dblstreet() {\n    this.streetControl.setValue(this.user.street);\n  }\n\n  public async submit() {\n    const answer = confirm(\"Are you sure you want to ship your order?\");\n      if (!answer) return;\n      try {\n        this.order.UserUUID = this.user.uuid;\n        this.order.CartID = this.cart[0].CartID;\n        this.order.TotalPrice = this.myItemService.totalCartPerUser(this.items);\n        this.order.Date = new Date().toString();\n        this.order.City = this.cityControl.value;\n        this.order.Street = this.streetControl.value;\n        this.order.Delivery = this.deliveryControl.value.toDateString();\n        this.order.CreditCard = this.creditControl.value.slice(-4);\n        await this.myOrdersService.addOrder(this.order);    //// MUST SEPERATE IT INTO DIFFERENT FUNCTION LIKE IN PRODUCT-CARD-COMPONENT\n        // this.notify.success(\"Order has been added.\");\n      }\n      catch(err) {\n          // this.notify.error(err);\n      }\n    \n    this.openDialog()\n  }\n\n  openDialog() {\n    const dialogRef = this.dialog.open(OrderSuccessDialogComponent,  {\n    });\n\n    dialogRef.afterClosed().subscribe(async result => {\n    });\n  }\n\n  // blocks dates with 3 deliveries from datepicker\n  myFilter = (d: Date): boolean => {\n    return !this.myBookedDates.find(x=>x.getTime()==d.getTime());\n  }\n  \n\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}