{"ast":null,"code":"\"use strict\"; // import { Component, OnDestroy, OnInit } from '@angular/core';\n// import { ActivatedRoute, Router } from '@angular/router';\n// import { Unsubscribe } from 'redux';\n// import { Subscription } from 'rxjs';\n// import CartModel from 'src/app/models/cart.model';\n// import OrderModel from 'src/app/models/order.model';\n// import UserModel from 'src/app/models/user.model';\n// import store from 'src/app/redux/store';\n// import { CartsService } from 'src/app/services/carts.service';\n// import { NotifyService } from 'src/app/services/notify.service';\n// import { OrderService } from 'src/app/services/order.service';\n// import { environment } from 'src/environments/environment';\n// import { ItemService } from 'src/app/services/item.service';\n// import ItemModel from 'src/app/models/item.model';\n// @Component({\n//   selector: 'app-cart-menu',\n//   templateUrl: './cart-menu.component.html',\n//   styleUrls: ['./cart-menu.component.css']\n// })\n//   export class CartMenuComponent implements OnInit, OnDestroy {\n//   public user: UserModel;\n//   private unsubscribeMe: Unsubscribe;\n//   public items: ItemModel[];\n//   public cart: CartModel[];\n//   public totalCart: number = 0;\n//   public orders: OrderModel[];\n//   public openCart: boolean;\n//   public imageUrl = environment.productImagesUrl;\n//   // for observable\n//   private subscription: Subscription;\n//   searchQuery: string = '';\n//     constructor( private myActivatedRoute: ActivatedRoute, \n//                   private myItemService: ItemService, \n//                   private notify: NotifyService, \n//                   private myOrdersService: OrderService,\n//                   private myCartService: CartsService,\n//                   private myRouter: Router,\n//                   ) {  \n//                     // for observable\n//                     this.subscription = this.myItemService.getCartObservable().subscribe(async addedItem => {\n//                       if (addedItem) {\n//                           console.log(addedItem);\n//                           // UPDATE\n//                           const itemToPush = new ItemModel();\n//                           itemToPush.ProductName = addedItem.name;\n//                           // needs that because of num/string problems\n//                           itemToPush.ItemID = addedItem.item.ItemID;\n//                           itemToPush.Quantity = addedItem.item.Quantity;\n//                           itemToPush.TotalPrice = addedItem.item.TotalPrice;\n//                           itemToPush.imageName = addedItem.item.ProductID + \".jpg\"\n//                           if (this.items) {\n//                             this.items.push(itemToPush);\n//                           } else {\n//                             const itemsArray = [itemToPush];\n//                             this.items = itemsArray;\n//                             this.openCart = true; \n//                             this.cart[0].CartID = addedItem.item.CartID;   \n//                           }\n//                           this.totalCart = this.myItemService.totalCartPerUser(this.items);\n//                           this.myCartService.cartUpdate(false, this.totalCart, addedItem.item.CartID);\n//                       } else {\n//                           // clear messages when empty message received\n//                           // this.messages = [];\n//                       }\n//                   });\n//                     }\n//  async ngOnInit() {\n//       this.unsubscribeMe = store.subscribe(() => {\n//           this.user = store.getState().authState.user;\n//       });\n//       // shai says this way the loggin in user will be shown automatically\n//       if (JSON.parse(localStorage.getItem('user'))) {\n//           this.user = store.getState().authState.user;\n//       }\n//        // GETS LAST ORDER\n//       try {\n//         this.orders = await this.myOrdersService.getLastOrderByUser(this.user.uuid);        \n//       }\n//       catch (err) {\n//           this.notify.error(err);\n//       }\n//       // GETS LAST CART (OPEN OR CLOSED)\n//       try {\n//         this.cart = await this.myCartService.getLastCartByUser(this.user.uuid);   \n//       } catch (err) {\n//           this.notify.error(err);\n//       }\n//       // CHECKS IF THE LAST CART IS OPEN (no match for last order)\n//       if (this.orders[0].CartID === this.cart[0].CartID) {this.openCart = false} else {this.openCart = true}\n//       // if there is an open cart -> get this.cart items\n//       if (this.openCart) {\n//         try {\n//           this.items = await this.myItemService.getOpenCartItems(this.cart[0].CartID);      \n//         } catch (err) {\n//           if (!this.items) { \n//             await this.myCartService.deleteCart(this.cart[0].CartID);\n//             this.getLastCart();\n//           };  // if teh cart is empty ot items (aftr removal of an item ) -> delete the cart as well\n//         }\n//       }\n//       this.totalCart = this.myItemService.totalCartPerUser(this.items);\n//   }\n//   ngOnDestroy(): void {\n//       this.unsubscribeMe();\n//   }\n//   public async getLastCart() {\n//     try {\n//       this.cart = await this.myCartService.getLastCartByUser(this.user.uuid);   \n//     } catch (err) {\n//         this.notify.error(err);\n//     }\n//   }\n//   public async deleteItem(id: number) {\n//     try {\n//         const answer = confirm(\"Are you sure you want to remove this item?\");\n//         if (!answer) return;\n//         await this.myItemService.deleteItem(id);\n//         // to delete it from screen in real time\n//         const index = this.items.findIndex(p => p.ItemID === id);\n//           this.items.splice(index, 1);\n//         this.notify.success(\"Item has been removed from cart.\");\n//         this.totalCart = this.myItemService.totalCartPerUser(this.items);\n//         this.myCartService.cartUpdate(false, this.totalCart, this.cart[0].CartID); // mainly used for sending totalCart\n//         // then it send an automatic request to get GET all cart items, and then if it's empty already it's deleted...\n//     }\n//     catch (err) {\n//       // if (!this.cartItems) { await this.myCartService.deleteCart(this.cart[0].CartID)};\n//         this.notify.error(err);\n//     }\n//     this.totalCart = this.myItemService.totalCartPerUser(this.items);\n//     console.log(\"total cart: \" + this.totalCart);\n//     // מה קורה אם מחקתי את הפריט האחרון? צריך למחוק את העגלה?\n//     if (this.items.length === 0) { \n//       this.totalCart = 0; // already above\n//       await this.myCartService.deleteCart(this.cart[0].CartID);\n//       this.myCartService.cartUpdate(true, 0, -1); // notifies produst card that cart is closed\n//           // cartId = -1 --> because it's not used when cartClosed is true\n//       this.getLastCart();\n//     };\n//     // if (this.cartItems.length === 0) {this.deleteCart(this.cart[0].CartID)};\n//   }\n//   // THIS IS THE ACTUAL EMPTY CART ALSO DELETES CART'S ITEMS\n//   public async deleteCart(cartId: number) {\n//     try {\n//       const answer = confirm(\"Are you sure you want to empty your cart?\");\n//       if (!answer) return;\n//       this.emptyCart(cartId);  // delete all cart's items\n//       await this.myCartService.deleteCart(cartId);\n//       this.openCart = false;\n//       this.items = undefined;\n//       this.notify.success(\"Cart has been emptied.\");\n//       this.myCartService.cartUpdate(true, 0, -1); // notifies produst card that cart is closed\n//           // cartId = -1 --> because it's not used when cartClosed is true\n//       this.getLastCart();\n//       // this.myRouter.navigateByUrl(\"/products\");\n//     }\n//     catch (err) {\n//       this.notify.error(err);\n//     }\n//   }\n//   // deletes all the items of a (deleted) cart\n//   async emptyCart(cartId: number) {\n//     try {\n//       await this.myItemService.deleteAllItemsOfCart(cartId);\n//       // this.items = undefined; // i yhik i don't need it\n//       this.myCartService.cartUpdate(true, 0, -1); // notifies produst card that cart is closed\n//           // cartId = -1 --> because it's not used when cartClosed is true\n//     }\n//     catch (err) {\n//       this.notify.error(err);\n//     }\n//   }\n//   order() {\n//     this.myRouter.navigateByUrl(\"/order\");\n//   }\n//   public isNotHome() {\n//     const h = this.myRouter.url.includes(\"/home\");\n//     return !h\n//   }\n//   public isOrder() {\n//     const o = this.myRouter.url.includes(\"/order\");\n//   return o\n//   }\n// }","map":{"version":3,"sources":["C:\\Users\\user\\OneDrive\\מסמכים\\fullstack\\ANGULAR\\SECONDRESTORE\\Front\\src\\app\\components\\cart-area\\cart-menu\\cart-menu.component.ts"],"names":[],"mappings":"csourcesContent":["// import { Component, OnDestroy, OnInit } from '@angular/core';\n// import { ActivatedRoute, Router } from '@angular/router';\n// import { Unsubscribe } from 'redux';\n// import { Subscription } from 'rxjs';\n// import CartModel from 'src/app/models/cart.model';\n// import OrderModel from 'src/app/models/order.model';\n// import UserModel from 'src/app/models/user.model';\n// import store from 'src/app/redux/store';\n// import { CartsService } from 'src/app/services/carts.service';\n// import { NotifyService } from 'src/app/services/notify.service';\n// import { OrderService } from 'src/app/services/order.service';\n// import { environment } from 'src/environments/environment';\n// import { ItemService } from 'src/app/services/item.service';\n// import ItemModel from 'src/app/models/item.model';\n\n// @Component({\n//   selector: 'app-cart-menu',\n//   templateUrl: './cart-menu.component.html',\n//   styleUrls: ['./cart-menu.component.css']\n// })\n\n//   export class CartMenuComponent implements OnInit, OnDestroy {\n\n//   public user: UserModel;\n//   private unsubscribeMe: Unsubscribe;\n//   public items: ItemModel[];\n//   public cart: CartModel[];\n//   public totalCart: number = 0;\n//   public orders: OrderModel[];\n//   public openCart: boolean;\n//   public imageUrl = environment.productImagesUrl;\n\n//   // for observable\n//   private subscription: Subscription;\n\n//   searchQuery: string = '';\n\n//     constructor( private myActivatedRoute: ActivatedRoute, \n//                   private myItemService: ItemService, \n//                   private notify: NotifyService, \n//                   private myOrdersService: OrderService,\n//                   private myCartService: CartsService,\n//                   private myRouter: Router,\n//                   ) {  \n\n//                     // for observable\n//                     this.subscription = this.myItemService.getCartObservable().subscribe(async addedItem => {\n//                       if (addedItem) {\n//                           console.log(addedItem);\n//                           // UPDATE\n//                           const itemToPush = new ItemModel();\n//                           itemToPush.ProductName = addedItem.name;\n//                           // needs that because of num/string problems\n//                           itemToPush.ItemID = addedItem.item.ItemID;\n//                           itemToPush.Quantity = addedItem.item.Quantity;\n//                           itemToPush.TotalPrice = addedItem.item.TotalPrice;\n//                           itemToPush.imageName = addedItem.item.ProductID + \".jpg\"\n//                           if (this.items) {\n//                             this.items.push(itemToPush);\n//                           } else {\n//                             const itemsArray = [itemToPush];\n//                             this.items = itemsArray;\n//                             this.openCart = true; \n//                             this.cart[0].CartID = addedItem.item.CartID;   \n//                           }\n//                           this.totalCart = this.myItemService.totalCartPerUser(this.items);\n//                           this.myCartService.cartUpdate(false, this.totalCart, addedItem.item.CartID);\n//                       } else {\n//                           // clear messages when empty message received\n//                           // this.messages = [];\n//                       }\n//                   });\n\n//                     }\n\n//  async ngOnInit() {\n//       this.unsubscribeMe = store.subscribe(() => {\n//           this.user = store.getState().authState.user;\n//       });\n\n//       // shai says this way the loggin in user will be shown automatically\n//       if (JSON.parse(localStorage.getItem('user'))) {\n//           this.user = store.getState().authState.user;\n//       }\n    \n//        // GETS LAST ORDER\n//       try {\n//         this.orders = await this.myOrdersService.getLastOrderByUser(this.user.uuid);        \n//       }\n//       catch (err) {\n//           this.notify.error(err);\n//       }\n\n//       // GETS LAST CART (OPEN OR CLOSED)\n//       try {\n//         this.cart = await this.myCartService.getLastCartByUser(this.user.uuid);   \n//       } catch (err) {\n//           this.notify.error(err);\n//       }\n\n//       // CHECKS IF THE LAST CART IS OPEN (no match for last order)\n//       if (this.orders[0].CartID === this.cart[0].CartID) {this.openCart = false} else {this.openCart = true}\n\n//       // if there is an open cart -> get this.cart items\n//       if (this.openCart) {\n//         try {\n//           this.items = await this.myItemService.getOpenCartItems(this.cart[0].CartID);      \n//         } catch (err) {\n//           if (!this.items) { \n//             await this.myCartService.deleteCart(this.cart[0].CartID);\n//             this.getLastCart();\n//           };  // if teh cart is empty ot items (aftr removal of an item ) -> delete the cart as well\n//         }\n//       }\n\n//       this.totalCart = this.myItemService.totalCartPerUser(this.items);\n\n//   }\n\n//   ngOnDestroy(): void {\n//       this.unsubscribeMe();\n//   }\n\n//   public async getLastCart() {\n//     try {\n//       this.cart = await this.myCartService.getLastCartByUser(this.user.uuid);   \n//     } catch (err) {\n//         this.notify.error(err);\n//     }\n//   }\n\n//   public async deleteItem(id: number) {\n//     try {\n//         const answer = confirm(\"Are you sure you want to remove this item?\");\n//         if (!answer) return;\n//         await this.myItemService.deleteItem(id);\n\n//         // to delete it from screen in real time\n//         const index = this.items.findIndex(p => p.ItemID === id);\n//           this.items.splice(index, 1);\n//         this.notify.success(\"Item has been removed from cart.\");\n//         this.totalCart = this.myItemService.totalCartPerUser(this.items);\n//         this.myCartService.cartUpdate(false, this.totalCart, this.cart[0].CartID); // mainly used for sending totalCart\n\n//         // then it send an automatic request to get GET all cart items, and then if it's empty already it's deleted...\n//     }\n//     catch (err) {\n//       // if (!this.cartItems) { await this.myCartService.deleteCart(this.cart[0].CartID)};\n//         this.notify.error(err);\n//     }\n//     this.totalCart = this.myItemService.totalCartPerUser(this.items);\n//     console.log(\"total cart: \" + this.totalCart);\n//     // מה קורה אם מחקתי את הפריט האחרון? צריך למחוק את העגלה?\n//     if (this.items.length === 0) { \n//       this.totalCart = 0; // already above\n//       await this.myCartService.deleteCart(this.cart[0].CartID);\n//       this.myCartService.cartUpdate(true, 0, -1); // notifies produst card that cart is closed\n//           // cartId = -1 --> because it's not used when cartClosed is true\n\n//       this.getLastCart();\n//     };\n//     // if (this.cartItems.length === 0) {this.deleteCart(this.cart[0].CartID)};\n//   }\n\n//   // THIS IS THE ACTUAL EMPTY CART ALSO DELETES CART'S ITEMS\n//   public async deleteCart(cartId: number) {\n//     try {\n//       const answer = confirm(\"Are you sure you want to empty your cart?\");\n//       if (!answer) return;\n//       this.emptyCart(cartId);  // delete all cart's items\n//       await this.myCartService.deleteCart(cartId);\n//       this.openCart = false;\n//       this.items = undefined;\n//       this.notify.success(\"Cart has been emptied.\");\n//       this.myCartService.cartUpdate(true, 0, -1); // notifies produst card that cart is closed\n//           // cartId = -1 --> because it's not used when cartClosed is true\n\n//       this.getLastCart();\n//       // this.myRouter.navigateByUrl(\"/products\");\n//     }\n//     catch (err) {\n//       this.notify.error(err);\n//     }\n//   }\n\n//   // deletes all the items of a (deleted) cart\n//   async emptyCart(cartId: number) {\n//     try {\n//       await this.myItemService.deleteAllItemsOfCart(cartId);\n//       // this.items = undefined; // i yhik i don't need it\n//       this.myCartService.cartUpdate(true, 0, -1); // notifies produst card that cart is closed\n//           // cartId = -1 --> because it's not used when cartClosed is true\n\n//     }\n//     catch (err) {\n//       this.notify.error(err);\n//     }\n//   }\n\n//   order() {\n//     this.myRouter.navigateByUrl(\"/order\");\n//   }\n\n//   public isNotHome() {\n//     const h = this.myRouter.url.includes(\"/home\");\n//     return !h\n//   }\n\n\n//   public isOrder() {\n//     const o = this.myRouter.url.includes(\"/order\");\n//   return o\n//   }\n\n// }\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}