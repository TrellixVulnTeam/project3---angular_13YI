{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/user/OneDrive/\\u05DE\\u05E1\\u05DE\\u05DB\\u05D9\\u05DD/fullstack/ANGULAR/SECONDRESTORE/Front/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport store from 'src/app/redux/store';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/notify.service\";\nimport * as i2 from \"src/app/services/order.service\";\nimport * as i3 from \"src/app/services/carts.service\";\nimport * as i4 from \"@angular/router\";\n\nfunction MenuComponent_app_start_resume_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"app-start-resume\", 2);\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"openCart\", ctx_r0.openCart);\n  }\n}\n\nexport class MenuComponent {\n  constructor(notify, myOrdersService, myCartService, router) {\n    this.notify = notify;\n    this.myOrdersService = myOrdersService;\n    this.myCartService = myCartService;\n    this.router = router;\n    this.subscription = this.myCartService.getCartOpenObservable().subscribe(message => {\n      if (message.cartClosed) {\n        // this updates all the cards!!! in one subscription i update them all!!\n        this.openCart = false;\n        console.log(\"for start/resume: open cart was closed?\");\n        console.log(\"open cart? \" + this.openCart);\n      } else {\n        this.openCart = true; // console.log(\"for start/resume: open cart was closed?\");\n        // console.log(\"open cart? \" + this.openCart);\n      }\n    });\n  }\n\n  ngOnInit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.unsubscribeMe = store.subscribe(() => {\n        var _a;\n\n        _this.isAdmin = (_a = store.getState().authState.user) === null || _a === void 0 ? void 0 : _a.isAdmin;\n        _this.user = store.getState().authState.user;\n      }); // shai says this way the loggin in user will be shown automatically\n\n      if (JSON.parse(localStorage.getItem('user'))) {\n        _this.user = store.getState().authState.user;\n      }\n\n      const uuid = _this.user.uuid;\n      console.log(\"uuid menu component: \" + uuid); // GETS LAST ORDER\n\n      try {\n        _this.orders = yield _this.myOrdersService.getLastOrderByUser(uuid);\n      } catch (err) {\n        _this.notify.error(err);\n      } // GETS LAST CART (OPEN OR CLOSED)\n\n\n      try {\n        _this.cart = yield _this.myCartService.getLastCartByUser(uuid);\n      } catch (err) {\n        _this.notify.error(err);\n      } // CHECKS IF THE LAST CART IS OPEN (no match for last order)\n\n\n      if (_this.orders[0].CartID === _this.cart[0].CartID) {\n        _this.openCart = false;\n      } else {\n        _this.openCart = true;\n      }\n    })();\n  }\n\n  ngOnDestroy() {\n    this.unsubscribeMe();\n  }\n\n}\n\nMenuComponent.ɵfac = function MenuComponent_Factory(t) {\n  return new (t || MenuComponent)(i0.ɵɵdirectiveInject(i1.NotifyService), i0.ɵɵdirectiveInject(i2.OrderService), i0.ɵɵdirectiveInject(i3.CartsService), i0.ɵɵdirectiveInject(i4.Router));\n};\n\nMenuComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: MenuComponent,\n  selectors: [[\"app-menu\"]],\n  decls: 3,\n  vars: 2,\n  consts: [[3, \"openCart\", 4, \"ngIf\"], [3, \"user\"], [3, \"openCart\"]],\n  template: function MenuComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, MenuComponent_app_start_resume_0_Template, 1, 1, \"app-start-resume\", 0);\n      i0.ɵɵelement(1, \"app-login\", 1);\n      i0.ɵɵelement(2, \"app-cart-menu\");\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.user);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"user\", ctx.user);\n    }\n  },\n  styles: [\"a[_ngcontent-%COMP%] {\\r\\n    margin-top: 20px;\\r\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1lbnUuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLGdCQUFnQjtBQUNwQiIsImZpbGUiOiJtZW51LmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJhIHtcclxuICAgIG1hcmdpbi10b3A6IDIwcHg7XHJcbn1cclxuIl19 */\"]\n});","map":{"version":3,"sources":["C:\\Users\\user\\OneDrive\\מסמכים\\fullstack\\ANGULAR\\SECONDRESTORE\\Front\\src\\app\\components\\layout-area\\menu\\menu.component.ts","C:\\Users\\user\\OneDrive\\מסמכים\\fullstack\\ANGULAR\\SECONDRESTORE\\Front\\src\\app\\components\\layout-area\\menu\\menu.component.html"],"names":[],"mappings":"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","sourcesContent":["import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Unsubscribe } from 'redux';\nimport CartItemModel from 'src/app/models/item.model';\nimport CartModel from 'src/app/models/cart.model';\nimport OrderModel from 'src/app/models/order.model';\nimport { UserModel } from 'src/app/models/user.model';\nimport store from 'src/app/redux/store';\nimport { CartsService } from 'src/app/services/carts.service';\nimport { NotifyService } from 'src/app/services/notify.service';\nimport { OrderService } from 'src/app/services/order.service';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-menu',\n  templateUrl: './menu.component.html',\n  styleUrls: ['./menu.component.css']\n})\nexport class MenuComponent implements OnInit, OnDestroy {\n    // export class MenuComponent {\n    public user: UserModel;\n    public isAdmin: boolean;\n    private unsubscribeMe: Unsubscribe;\n    public cart: CartModel[];\n    public orders: OrderModel[];\n    public openCart: boolean;\n\n    public products: string;\n    private subscription: Subscription;\n\n\n    constructor(\n        private notify: NotifyService, \n        private myOrdersService: OrderService,\n        private myCartService: CartsService,\n        private router: Router) {   \n            this.subscription = this.myCartService.getCartOpenObservable().subscribe(message => {\n                if (message.cartClosed) {\n                    // this updates all the cards!!! in one subscription i update them all!!\n                    this.openCart = false;\n                    console.log(\"for start/resume: open cart was closed?\");\n                    console.log(\"open cart? \" + this.openCart);\n                } else {\n                    this.openCart = true;\n                    // console.log(\"for start/resume: open cart was closed?\");\n                    // console.log(\"open cart? \" + this.openCart);\n                }\n                \n            })\n         }\n\n\n    async ngOnInit() {\n        this.unsubscribeMe = store.subscribe(() => {\n            this.isAdmin = store.getState().authState.user?.isAdmin;\n            this.user = store.getState().authState.user;\n        });\n\n        // shai says this way the loggin in user will be shown automatically\n        if (JSON.parse(localStorage.getItem('user'))) {\n            this.user = store.getState().authState.user;\n        \n        }\n\n      const uuid = this.user.uuid;\n      console.log(\"uuid menu component: \" + uuid);\n     // GETS LAST ORDER\n    try {\n        this.orders = await this.myOrdersService.getLastOrderByUser(uuid);\n    }\n      catch (err) {\n          this.notify.error(err);\n      }\n  \n      // GETS LAST CART (OPEN OR CLOSED)\n      try {\n        this.cart = await this.myCartService.getLastCartByUser(uuid);   \n      } catch (err) {\n          this.notify.error(err);\n      }\n  \n      // CHECKS IF THE LAST CART IS OPEN (no match for last order)\n      if (this.orders[0].CartID === this.cart[0].CartID) {this.openCart = false} else {this.openCart = true}\n\n   }\n    \n\n    ngOnDestroy(): void {\n        this.unsubscribeMe();\n    }\n   \n}\n","<app-start-resume [openCart]=\"openCart\" *ngIf=\"user\"></app-start-resume>\n<app-login [user]=\"user\"></app-login>\n<app-cart-menu></app-cart-menu>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<!-- <div> -->\n    <!-- <nav>     -->\n        <!-- <a routerLink=\"/home\" routerLinkActive=\"active\">Home</a> -->\n        <!-- <a routerLink=\"/products\" routerLinkActive=\"active\">Products</a> -->\n        <!-- <a routerLink=\"/employees\" routerLinkActive=\"active\">Employees</a> -->\n        <!-- <a routerLink= \"/categories\" routerLinkActive=\"active\">Categories</a> -->\n        <!-- <a routerLink=\"/about\" routerLinkActive=\"active\">About</a> -->\n        <!-- <a routerLink=\"/contact-us\" routerLinkActive=\"active\">Contact Us</a> -->\n        <!-- <a *ngIf=\"isAdmin\" routerLink=\"/admin\" routerLinkActive=\"active\">Admin</a> -->\n    <!-- </nav> -->\n<!-- </div> -->"],"sourceRoot":""},"metadata":{},"sourceType":"module"}