{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/user/OneDrive/\\u05DE\\u05E1\\u05DE\\u05DB\\u05D9\\u05DD/fullstack/ANGULAR/SECONDRESTORE/Front/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { environment } from 'src/environments/environment';\nimport { AuthActionType, userLoggedInAction, userLoggedOutAction, userRegisteredAction } from '../redux/auth-state';\nimport store from '../redux/store';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n  }\n\n  register(user) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      // \"http://localhost:3030/api/auth/register\"\n      const addedUser = yield _this.http.post(environment.registerUrl, user).toPromise();\n      console.log(addedUser);\n      store.dispatch(userRegisteredAction(addedUser));\n      return addedUser;\n    })();\n  }\n\n  login(credentials) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      // 'loggedInUser' = UserModel with 'username, firstname, lastname, token';\n      // 'first' because I want to display in header\n      // 'token' because I need to send to server to authorize my requests\n      // 'password' WILL NOT BE RETURNED TO CLIENT\n      const loggedInUser = yield _this2.http.post(environment.loginUrl, credentials).toPromise();\n      store.dispatch(userLoggedInAction(loggedInUser));\n      return loggedInUser;\n    })();\n  }\n\n  logout() {\n    store.dispatch(userLoggedOutAction());\n    store.dispatch({\n      type: AuthActionType.UserLoggedOut,\n      payload: null\n    });\n  }\n\n}\n\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:\\Users\\user\\OneDrive\\מסמכים\\fullstack\\ANGULAR\\SECONDRESTORE\\Front\\src\\app\\services\\auth.service.ts"],"names":[],"mappings":";AAEA,SAAS,WAAT,QAA4B,8BAA5B;AAGA,SAAS,cAAT,EAAyB,kBAAzB,EAA6C,mBAA7C,EAAkE,oBAAlE,QAA8F,qBAA9F;AACA,OAAO,KAAP,MAAkB,gBAAlB;;;AAKA,OAAM,MAAO,WAAP,CAAkB;AAEpB,EAAA,WAAA,CAAoB,IAApB,EAAoC;AAAhB,SAAA,IAAA,GAAA,IAAA;AAAqB;;AAE5B,EAAA,QAAQ,CAAC,IAAD,EAAgB;AAAA;;AAAA;AACjC;AACA,YAAM,SAAS,SAAS,KAAI,CAAC,IAAL,CAAU,IAAV,CAA0B,WAAW,CAAC,WAAtC,EAAmD,IAAnD,EAAyD,SAAzD,EAAxB;AACA,MAAA,OAAO,CAAC,GAAR,CAAY,SAAZ;AACA,MAAA,KAAK,CAAC,QAAN,CAAe,oBAAoB,CAAC,SAAD,CAAnC;AACA,aAAO,SAAP;AALiC;AAMpC;;AAEY,EAAA,KAAK,CAAC,WAAD,EAA8B;AAAA;;AAAA;AAC5C;AACA;AACA;AACA;AACA,YAAM,YAAY,SAAS,MAAI,CAAC,IAAL,CAAU,IAAV,CAA0B,WAAW,CAAC,QAAtC,EAAgD,WAAhD,EAA6D,SAA7D,EAA3B;AACA,MAAA,KAAK,CAAC,QAAN,CAAe,kBAAkB,CAAC,YAAD,CAAjC;AACA,aAAO,YAAP;AAP4C;AAQ/C;;AAEM,EAAA,MAAM,GAAA;AACT,IAAA,KAAK,CAAC,QAAN,CAAe,mBAAmB,EAAlC;AACA,IAAA,KAAK,CAAC,QAAN,CAAe;AAAE,MAAA,IAAI,EAAE,cAAc,CAAC,aAAvB;AAAsC,MAAA,OAAO,EAAE;AAA/C,KAAf;AACH;;AAzBmB;;;mBAAX,W,EAAW,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,UAAA,C;AAAA,C;;;SAAX,W;AAAW,EAAA,OAAA,EAAX,WAAW,CAAA,I;AAAA,EAAA,UAAA,EAFR","sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\nimport { CredentialsModel } from '../models/credentials.model';\nimport { UserModel } from '../models/user.model';\nimport { AuthActionType, userLoggedInAction, userLoggedOutAction, userRegisteredAction } from '../redux/auth-state';\nimport store from '../redux/store';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class AuthService {\n\n    constructor(private http: HttpClient) { }\n\n    public async register(user: UserModel) {\n        // \"http://localhost:3030/api/auth/register\"\n        const addedUser = await this.http.post<UserModel>(environment.registerUrl, user).toPromise();\n        console.log(addedUser);\n        store.dispatch(userRegisteredAction(addedUser));\n        return addedUser;\n    }\n\n    public async login(credentials: CredentialsModel) {\n        // 'loggedInUser' = UserModel with 'username, firstname, lastname, token';\n        // 'first' because I want to display in header\n        // 'token' because I need to send to server to authorize my requests\n        // 'password' WILL NOT BE RETURNED TO CLIENT\n        const loggedInUser = await this.http.post<UserModel>(environment.loginUrl, credentials).toPromise();\n        store.dispatch(userLoggedInAction(loggedInUser));\n        return loggedInUser;\n    }\n\n    public logout() {\n        store.dispatch(userLoggedOutAction());\n        store.dispatch({ type: AuthActionType.UserLoggedOut, payload: null});\n    }\n    \n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}