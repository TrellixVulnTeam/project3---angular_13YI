{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/user/OneDrive/\\u05DE\\u05E1\\u05DE\\u05DB\\u05D9\\u05DD/fullstack/ANGULAR/SECONDRESTORE/Front/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { Subject } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport CartModel from '../models/cart.model';\nimport { cartAddedAction, cartDeletedAction, cartsDownloadedAction } from '../redux/cart-state';\nimport store from '../redux/store';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./timezone.service\";\nexport class CartsService {\n  constructor(http, tz_helper) {\n    this.http = http;\n    this.tz_helper = tz_helper;\n    this.subject = new Subject();\n  }\n\n  cartUpdate(cartClosed, totalCart, cartId) {\n    // item.ProductName = name;\n    console.log(\"cart in service open or close:\");\n    console.log(cartClosed);\n    this.subject.next({\n      cartClosed: cartClosed,\n      totalCart: totalCart,\n      cartId: cartId\n    });\n  }\n\n  getCartOpenObservable() {\n    return this.subject.asObservable();\n  }\n\n  getLastCartByUser(uuid) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      // if (store.getState().cartState.carts.length === 0) {\n      const carts = yield _this.http.get(environment.cartsUrl + \"user/\" + uuid).toPromise(); // Iterate over all employees and convert timezone to my local timezone\n      //   for (let order of orders) {\n      //     order.Date = this.tz_helper.convertTZ(order.Date).toString(); \n      // }\n\n      store.dispatch(cartsDownloadedAction(carts)); // }\n      // NEED TO UNDERSTAND IF THAT IS CORRECT\n      // const carts = store.getState().cartState.carts.filter(p => p.UserUUID === uuid);\n\n      return carts;\n    })();\n  } //   // Get carts per user: \n  //   public async getOpenCartsPerUserOrderByDateDesc(uuid: string) {\n  //     if (store.getState().cartState.carts.length === 0) {\n  //         const carts = await this.http.get<CartModel[]>(environment.cartsUrl  + uuid).toPromise();\n  //          // Iterate over all employees and convert timezone to my local timezone\n  //          for (let cart of carts) {\n  //           cart.date = this.tz_helper.convertTZ(cart.date).toString(); \n  //       }\n  //         store.dispatch(cartsDownloadedAction(carts));\n  //     }\n  //     // NEED TO UNDERSTAND IF THAT IS CORRECT\n  //     const carts = store.getState().cartState.carts.filter(p => p.userUUID === uuid);\n  //     return carts;\n  //   }\n  // // Delete cart: \n\n\n  deleteCart(id) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this2.http.delete(environment.cartsUrl + id).toPromise();\n      store.dispatch(cartDeletedAction(id));\n    })();\n  } //     // // Delete all carts: \n  //     public async deleteAllCarts(uuid: string) {\n  //       await this.http.delete(environment.cartsUrl + \"all/\" + uuid).toPromise();\n  //       // store.dispatch(cartDeletedAction(uuid));  to understand how redux works and do create the right function\n  //   }\n  //     // i use \"delete\" and not \"patch\" because this way I can send\n  //     public async patchCartToClose(cart: CartModel) {\n  //       const myFormData: FormData = CartModel.convertToFormData(cart);\n  //       const updatedCart = await this.http.patch<CartModel>(environment.cartsUrl + \"all/\" + cart.userUUID, myFormData).toPromise();\n  //       store.dispatch(cartUpdatedAction(updatedCart));\n  //       return updatedCart;\n  //     }\n  //     // Add cart: \n\n\n  addCart(cart) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const myFormData = CartModel.convertToFormData(cart);\n      const addedCart = yield _this3.http.post(environment.cartsUrl, myFormData).toPromise();\n      const resultToStore = [];\n      resultToStore.push(addedCart);\n      store.dispatch(cartAddedAction(resultToStore));\n      return resultToStore;\n    })();\n  }\n\n}\n\nCartsService.ɵfac = function CartsService_Factory(t) {\n  return new (t || CartsService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.TimezoneService));\n};\n\nCartsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CartsService,\n  factory: CartsService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:\\Users\\user\\OneDrive\\מסמכים\\fullstack\\ANGULAR\\SECONDRESTORE\\Front\\src\\app\\services\\carts.service.ts"],"names":[],"mappings":";AAEA,SAAqB,OAArB,QAAoC,MAApC;AACA,SAAS,WAAT,QAA4B,8BAA5B;AACA,OAAO,SAAP,MAAsB,sBAAtB;AACA,SAAS,eAAT,EAA0B,iBAA1B,EAA6C,qBAA7C,QAA0E,qBAA1E;AACA,OAAO,KAAP,MAAkB,gBAAlB;;;;AAMA,OAAM,MAAO,YAAP,CAAmB;AAIvB,EAAA,WAAA,CAAoB,IAApB,EAA8C,SAA9C,EAAwE;AAApD,SAAA,IAAA,GAAA,IAAA;AAA0B,SAAA,SAAA,GAAA,SAAA;AAFtC,SAAA,OAAA,GAAU,IAAI,OAAJ,EAAV;AAEqE;;AAE7E,EAAA,UAAU,CAAC,UAAD,EAAsB,SAAtB,EAAyC,MAAzC,EAAuD;AAC/D;AACA,IAAA,OAAO,CAAC,GAAR,CAAY,gCAAZ;AACA,IAAA,OAAO,CAAC,GAAR,CAAY,UAAZ;AACA,SAAK,OAAL,CAAa,IAAb,CAAkB;AACd,MAAA,UAAU,EAAE,UADE;AAEd,MAAA,SAAS,EAAE,SAFG;AAGd,MAAA,MAAM,EAAE;AAHM,KAAlB;AAKD;;AAED,EAAA,qBAAqB,GAAA;AACnB,WAAO,KAAK,OAAL,CAAa,YAAb,EAAP;AACD;;AAEY,EAAA,iBAAiB,CAAC,IAAD,EAAa;AAAA;;AAAA;AACzC;AACI,YAAM,KAAK,SAAS,KAAI,CAAC,IAAL,CAAU,GAAV,CAA2B,WAAW,CAAC,QAAZ,GAAuB,OAAvB,GAAiC,IAA5D,EAAkE,SAAlE,EAApB,CAFqC,CAGrC;AACF;AACA;AACA;;AACE,MAAA,KAAK,CAAC,QAAN,CAAe,qBAAqB,CAAC,KAAD,CAApC,EAPqC,CAQzC;AACI;AACN;;AACA,aAAO,KAAP;AAX2C;AAY1C,GAjCsB,CAmCzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEI;;;AACa,EAAA,UAAU,CAAC,EAAD,EAAW;AAAA;;AAAA;AAC9B,YAAM,MAAI,CAAC,IAAL,CAAU,MAAV,CAAiB,WAAW,CAAC,QAAZ,GAAuB,EAAxC,EAA4C,SAA5C,EAAN;AACA,MAAA,KAAK,CAAC,QAAN,CAAe,iBAAiB,CAAC,EAAD,CAAhC;AAF8B;AAGjC,GAvDoB,CA0DzB;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AACiB,EAAA,OAAO,CAAC,IAAD,EAAgB;AAAA;;AAAA;AAClC,YAAM,UAAU,GAAa,SAAS,CAAC,iBAAV,CAA4B,IAA5B,CAA7B;AACA,YAAM,SAAS,SAAS,MAAI,CAAC,IAAL,CAAU,IAAV,CAA0B,WAAW,CAAC,QAAtC,EAAgD,UAAhD,EAA4D,SAA5D,EAAxB;AACA,YAAM,aAAa,GAAgB,EAAnC;AACA,MAAA,aAAa,CAAC,IAAd,CAAmB,SAAnB;AACA,MAAA,KAAK,CAAC,QAAN,CAAe,eAAe,CAAC,aAAD,CAA9B;AACA,aAAO,aAAP;AANkC;AAOrC;;AAhFsB;;;mBAAZ,Y,EAAY,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,UAAA,C,EAAA,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,eAAA,C;AAAA,C;;;SAAZ,Y;AAAY,EAAA,OAAA,EAAZ,YAAY,CAAA,I;AAAA,EAAA,UAAA,EAFX","sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport CartModel from '../models/cart.model';\nimport { cartAddedAction, cartDeletedAction, cartsDownloadedAction } from '../redux/cart-state';\nimport store from '../redux/store';\nimport { TimezoneService } from './timezone.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CartsService {\n\n  private subject = new Subject<any>();\n\n  constructor(private http: HttpClient, private tz_helper: TimezoneService) { }\n\n  cartUpdate(cartClosed: boolean, totalCart: number, cartId: number) {\n    // item.ProductName = name;\n    console.log(\"cart in service open or close:\")\n    console.log(cartClosed);\n    this.subject.next({\n        cartClosed: cartClosed,\n        totalCart: totalCart,\n        cartId: cartId\n    });\n  }\n\n  getCartOpenObservable(): Observable<any> {\n    return this.subject.asObservable();\n  }\n\n  public async getLastCartByUser(uuid: string) {   // NEVER FROM REDUX\n    // if (store.getState().cartState.carts.length === 0) {\n        const carts = await this.http.get<CartModel[]>(environment.cartsUrl + \"user/\" + uuid).toPromise();\n        // Iterate over all employees and convert timezone to my local timezone\n      //   for (let order of orders) {\n      //     order.Date = this.tz_helper.convertTZ(order.Date).toString(); \n      // }\n        store.dispatch(cartsDownloadedAction(carts));\n    // }\n        // NEED TO UNDERSTAND IF THAT IS CORRECT\n  // const carts = store.getState().cartState.carts.filter(p => p.UserUUID === uuid);\n  return carts;\n  }\n\n//   // Get carts per user: \n//   public async getOpenCartsPerUserOrderByDateDesc(uuid: string) {\n//     if (store.getState().cartState.carts.length === 0) {\n//         const carts = await this.http.get<CartModel[]>(environment.cartsUrl  + uuid).toPromise();\n//          // Iterate over all employees and convert timezone to my local timezone\n//          for (let cart of carts) {\n//           cart.date = this.tz_helper.convertTZ(cart.date).toString(); \n//       }\n//         store.dispatch(cartsDownloadedAction(carts));\n//     }\n\n//     // NEED TO UNDERSTAND IF THAT IS CORRECT\n//     const carts = store.getState().cartState.carts.filter(p => p.userUUID === uuid);\n//     return carts;\n//   }\n\n    // // Delete cart: \n    public async deleteCart(id: number) {\n        await this.http.delete(environment.cartsUrl + id).toPromise();\n        store.dispatch(cartDeletedAction(id));\n    }\n\n    \n//     // // Delete all carts: \n//     public async deleteAllCarts(uuid: string) {\n//       await this.http.delete(environment.cartsUrl + \"all/\" + uuid).toPromise();\n//       // store.dispatch(cartDeletedAction(uuid));  to understand how redux works and do create the right function\n//   }\n\n//     // i use \"delete\" and not \"patch\" because this way I can send\n//     public async patchCartToClose(cart: CartModel) {\n//       const myFormData: FormData = CartModel.convertToFormData(cart);\n//       const updatedCart = await this.http.patch<CartModel>(environment.cartsUrl + \"all/\" + cart.userUUID, myFormData).toPromise();\n//       store.dispatch(cartUpdatedAction(updatedCart));\n//       return updatedCart;\n//     }\n\n//     // Add cart: \n    public async addCart(cart: CartModel) {\n      const myFormData: FormData = CartModel.convertToFormData(cart);\n      const addedCart = await this.http.post<CartModel>(environment.cartsUrl, myFormData).toPromise();\n      const resultToStore: CartModel[] = [];\n      resultToStore.push(addedCart);\n      store.dispatch(cartAddedAction(resultToStore));\n      return resultToStore;\n  }\n\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}