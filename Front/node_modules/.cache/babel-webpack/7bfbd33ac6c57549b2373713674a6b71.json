{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/user/OneDrive/\\u05DE\\u05E1\\u05DE\\u05DB\\u05D9\\u05DD/fullstack/ANGULAR/SECONDRESTORE/Front/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserService {\n  constructor(http) {\n    this.http = http;\n  } // Get all users: \n\n\n  getAllidcardsEmails() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      // i don't use redux here coz i don't want to save them because of sensitivity\n      // this is why in the backend i select only the relevant column\n      const users = yield _this.http.get(environment.usersUrl).toPromise();\n      return users;\n    })();\n  }\n\n}\n\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:\\Users\\user\\OneDrive\\מסמכים\\fullstack\\ANGULAR\\SECONDRESTORE\\Front\\src\\app\\services\\users.service.ts"],"names":[],"mappings":";AAEA,SAAS,WAAT,QAA4B,8BAA5B;;;AAMA,OAAM,MAAO,WAAP,CAAkB;AAEtB,EAAA,WAAA,CAAoB,IAApB,EAAoC;AAAhB,SAAA,IAAA,GAAA,IAAA;AAAqB,GAFnB,CAIpB;;;AACa,EAAA,mBAAmB,GAAA;AAAA;;AAAA;AAC5B;AACA;AACA,YAAM,KAAK,SAAS,KAAI,CAAC,IAAL,CAAU,GAAV,CAA2B,WAAW,CAAC,QAAvC,EAAiD,SAAjD,EAApB;AACA,aAAO,KAAP;AAJ4B;AAK/B;;AAVmB;;;mBAAX,W,EAAW,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,UAAA,C;AAAA,C;;;SAAX,W;AAAW,EAAA,OAAA,EAAX,WAAW,CAAA,I;AAAA,EAAA,UAAA,EAFV","sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\nimport UserModel from '../models/user.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  constructor(private http: HttpClient) { }\n\n    // Get all users: \n    public async getAllidcardsEmails() {\n        // i don't use redux here coz i don't want to save them because of sensitivity\n        // this is why in the backend i select only the relevant column\n        const users = await this.http.get<UserModel[]>(environment.usersUrl).toPromise();           \n        return users;\n    }\n\n    // // Get one employee: \n    // public async getOneEmployee(id: number) {\n    //     if (store.getState().employeesState.employees.length === 0) {\n    //         const employees = await this.http.get<EmployeeModel[]>(environment.employeesUrl).toPromise();\n    //         employees[0].BirthDate = this.tz_helper.convertTZ(employees[0].BirthDate).toString(); \n    //         store.dispatch(employeesDownloadedAction(employees));\n    //     }\n    //     const employee = store.getState().employeesState.employees.find(p => p.id === id);\n    //     return employee;\n    // }\n\n    // // Add employee: \n    // public async addEmployee(employee: EmployeeModel) {\n    //     const myFormData: FormData = EmployeeModel.convertToFormData(employee);\n    //     const addedEmployee = await this.http.post<EmployeeModel>(environment.employeesUrl, myFormData).toPromise();\n    //     store.dispatch(employeeAddedAction(addedEmployee));\n    //     return addedEmployee;\n    // }\n\n    // // Update employee: \n    // public async updateEmployee(employee: EmployeeModel) {\n    //     const myFormData: FormData = EmployeeModel.convertToFormData(employee);\n    //     const updatedEmployee = await this.http.put<EmployeeModel>(environment.employeesUrl + employee.id, myFormData).toPromise();\n    //     store.dispatch(employeeUpdatedAction(updatedEmployee));\n    //     return updatedEmployee;\n    // }\n\n    // // Delete employee: \n    // public async deleteEmployee(id: number) {\n    //     await this.http.delete(environment.employeesUrl + id).toPromise();\n    //     store.dispatch(employeeDeletedAction(id));\n    // }\n\n}"],"sourceRoot":""},"metadata":{},"sourceType":"module"}