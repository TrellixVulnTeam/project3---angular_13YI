{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/user/OneDrive/\\u05DE\\u05E1\\u05DE\\u05DB\\u05D9\\u05DD/fullstack/ANGULAR/SECONDRESTORE/Front/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport store from 'src/app/redux/store';\nimport { environment } from 'src/environments/environment';\nimport ItemModel from 'src/app/models/item.model';\nlet CartMenuComponent = class CartMenuComponent {\n  constructor(myActivatedRoute, myItemService, notify, myOrdersService, myCartService, myRouter) {\n    var _this = this;\n\n    this.myActivatedRoute = myActivatedRoute;\n    this.myItemService = myItemService;\n    this.notify = notify;\n    this.myOrdersService = myOrdersService;\n    this.myCartService = myCartService;\n    this.myRouter = myRouter;\n    this.totalCart = 0;\n    this.imageUrl = environment.productImagesUrl;\n    this.searchQuery = ''; // for observable\n\n    this.subscription = this.myItemService.getCartObservable().subscribe( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (addedItem) {\n        if (addedItem) {\n          console.log(addedItem); // UPDATE\n\n          const itemToPush = new ItemModel();\n          itemToPush.ProductName = addedItem.name; // needs that because of num/string problems\n\n          itemToPush.ItemID = addedItem.item.ItemID;\n          itemToPush.Quantity = addedItem.item.Quantity;\n          itemToPush.TotalPrice = addedItem.item.TotalPrice;\n          itemToPush.imageName = addedItem.item.ProductID + \".jpg\";\n\n          if (_this.items) {\n            _this.items.push(itemToPush);\n          } else {\n            const itemsArray = [itemToPush];\n            _this.items = itemsArray;\n            _this.openCart = true;\n            _this.cart[0].CartID = addedItem.item.CartID;\n          }\n\n          _this.totalCart = _this.myItemService.totalCartPerUser(_this.items);\n\n          _this.myCartService.cartUpdate(false, _this.totalCart, addedItem.item.CartID);\n        } else {// clear messages when empty message received\n          // this.messages = [];\n        }\n      });\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n  }\n\n  ngOnInit() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2.unsubscribeMe = store.subscribe(() => {\n        _this2.user = store.getState().authState.user;\n      }); // shai says this way the loggin in user will be shown automatically\n\n      if (JSON.parse(localStorage.getItem('user'))) {\n        _this2.user = store.getState().authState.user;\n      } // GETS LAST ORDER\n\n\n      try {\n        _this2.orders = yield _this2.myOrdersService.getLastOrderByUser(_this2.user.uuid);\n      } catch (err) {\n        _this2.notify.error(err);\n      } // GETS LAST CART (OPEN OR CLOSED)\n\n\n      try {\n        _this2.cart = yield _this2.myCartService.getLastCartByUser(_this2.user.uuid);\n      } catch (err) {\n        _this2.notify.error(err);\n      } // CHECKS IF THE LAST CART IS OPEN (no match for last order)\n\n\n      if (_this2.orders[0].CartID === _this2.cart[0].CartID) {\n        _this2.openCart = false;\n      } else {\n        _this2.openCart = true;\n      } // if there is an open cart -> get this.cart items\n\n\n      if (_this2.openCart) {\n        try {\n          _this2.items = yield _this2.myItemService.getOpenCartItems(_this2.cart[0].CartID);\n        } catch (err) {\n          if (!_this2.items) {\n            yield _this2.myCartService.deleteCart(_this2.cart[0].CartID);\n\n            _this2.getLastCart();\n          }\n\n          ; // if teh cart is empty ot items (aftr removal of an item ) -> delete the cart as well\n        }\n      }\n\n      _this2.totalCart = _this2.myItemService.totalCartPerUser(_this2.items);\n    })();\n  }\n\n  ngOnDestroy() {\n    this.unsubscribeMe();\n  }\n\n  getLastCart() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        _this3.cart = yield _this3.myCartService.getLastCartByUser(_this3.user.uuid);\n      } catch (err) {\n        _this3.notify.error(err);\n      }\n    })();\n  }\n\n  deleteItem(id) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const answer = confirm(\"Are you sure you want to remove this item?\");\n        if (!answer) return;\n        yield _this4.myItemService.deleteItem(id); // to delete it from screen in real time\n\n        const index = _this4.items.findIndex(p => p.ItemID === id);\n\n        _this4.items.splice(index, 1);\n\n        _this4.notify.success(\"Item has been removed from cart.\");\n\n        _this4.totalCart = _this4.myItemService.totalCartPerUser(_this4.items);\n\n        _this4.myCartService.cartUpdate(false, _this4.totalCart, _this4.cart[0].CartID); // mainly used for sending totalCart\n        // then it send an automatic request to get GET all cart items, and then if it's empty already it's deleted...\n\n      } catch (err) {\n        // if (!this.cartItems) { await this.myCartService.deleteCart(this.cart[0].CartID)};\n        _this4.notify.error(err);\n      }\n\n      _this4.totalCart = _this4.myItemService.totalCartPerUser(_this4.items);\n      console.log(\"total cart: \" + _this4.totalCart); // מה קורה אם מחקתי את הפריט האחרון? צריך למחוק את העגלה?\n\n      if (_this4.items.length === 0) {\n        _this4.totalCart = 0; // already above\n\n        yield _this4.myCartService.deleteCart(_this4.cart[0].CartID);\n\n        _this4.myCartService.cartUpdate(true, 0, -1); // notifies produst card that cart is closed\n        // cartId = -1 --> because it's not used when cartClosed is true\n\n\n        _this4.getLastCart();\n      }\n\n      ; // if (this.cartItems.length === 0) {this.deleteCart(this.cart[0].CartID)};\n    })();\n  } // THIS IS THE ACTUAL EMPTY CART ALSO DELETES CART'S ITEMS\n\n\n  deleteCart(cartId) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        const answer = confirm(\"Are you sure you want to empty your cart?\");\n        if (!answer) return;\n\n        _this5.emptyCart(cartId); // delete all cart's items\n\n\n        yield _this5.myCartService.deleteCart(cartId);\n        _this5.openCart = false;\n        _this5.items = undefined;\n\n        _this5.notify.success(\"Cart has been emptied.\");\n\n        _this5.myCartService.cartUpdate(true, 0, -1); // notifies produst card that cart is closed\n        // cartId = -1 --> because it's not used when cartClosed is true\n\n\n        _this5.getLastCart(); // this.myRouter.navigateByUrl(\"/products\");\n\n      } catch (err) {\n        _this5.notify.error(err);\n      }\n    })();\n  } // deletes all the items of a (deleted) cart\n\n\n  emptyCart(cartId) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        yield _this6.myItemService.deleteAllItemsOfCart(cartId); // this.items = undefined; // i yhik i don't need it\n\n        _this6.myCartService.cartUpdate(true, 0, -1); // notifies produst card that cart is closed\n        // cartId = -1 --> because it's not used when cartClosed is true\n\n      } catch (err) {\n        _this6.notify.error(err);\n      }\n    })();\n  }\n\n  order() {\n    this.myRouter.navigateByUrl(\"/order\");\n  }\n\n  isNotHome() {\n    const h = this.myRouter.url.includes(\"/home\");\n    return !h;\n  }\n\n  isOrder() {\n    const o = this.myRouter.url.includes(\"/order\");\n    return o;\n  }\n\n};\nCartMenuComponent = __decorate([Component({\n  selector: 'app-cart-menu',\n  templateUrl: './cart-menu.component.html',\n  styleUrls: ['./cart-menu.component.css'],\n  styles: []\n})], CartMenuComponent);\nexport { CartMenuComponent }; // import { Component, OnDestroy, OnInit } from '@angular/core';\n// import { ActivatedRoute, Router } from '@angular/router';\n// import { Unsubscribe } from 'redux';\n// import { Subscription } from 'rxjs';\n// import CartModel from 'src/app/models/cart.model';\n// import OrderModel from 'src/app/models/order.model';\n// import UserModel from 'src/app/models/user.model';\n// import store from 'src/app/redux/store';\n// import { CartsService } from 'src/app/services/carts.service';\n// import { NotifyService } from 'src/app/services/notify.service';\n// import { OrderService } from 'src/app/services/order.service';\n// import { environment } from 'src/environments/environment';\n// import { ItemService } from 'src/app/services/item.service';\n// import ItemModel from 'src/app/models/item.model';\n// @Component({\n//   selector: 'app-cart-menu',\n//   templateUrl: './cart-menu.component.html',\n//   styleUrls: ['./cart-menu.component.css']\n// })\n//   export class CartMenuComponent implements OnInit, OnDestroy {\n//   public user: UserModel;\n//   private unsubscribeMe: Unsubscribe;\n//   public items: ItemModel[];\n//   public cart: CartModel[];\n//   public totalCart: number = 0;\n//   public orders: OrderModel[];\n//   public openCart: boolean;\n//   public imageUrl = environment.productImagesUrl;\n//   // for observable\n//   private subscription: Subscription;\n//   searchQuery: string = '';\n//     constructor( private myActivatedRoute: ActivatedRoute, \n//                   private myItemService: ItemService, \n//                   private notify: NotifyService, \n//                   private myOrdersService: OrderService,\n//                   private myCartService: CartsService,\n//                   private myRouter: Router,\n//                   ) {  \n//                     // for observable\n//                     this.subscription = this.myItemService.getCartObservable().subscribe(async addedItem => {\n//                       if (addedItem) {\n//                           console.log(addedItem);\n//                           // UPDATE\n//                           const itemToPush = new ItemModel();\n//                           itemToPush.ProductName = addedItem.name;\n//                           // needs that because of num/string problems\n//                           itemToPush.ItemID = addedItem.item.ItemID;\n//                           itemToPush.Quantity = addedItem.item.Quantity;\n//                           itemToPush.TotalPrice = addedItem.item.TotalPrice;\n//                           itemToPush.imageName = addedItem.item.ProductID + \".jpg\"\n//                           if (this.items) {\n//                             this.items.push(itemToPush);\n//                           } else {\n//                             const itemsArray = [itemToPush];\n//                             this.items = itemsArray;\n//                             this.openCart = true; \n//                             this.cart[0].CartID = addedItem.item.CartID;   \n//                           }\n//                           this.totalCart = this.myItemService.totalCartPerUser(this.items);\n//                           this.myCartService.cartUpdate(false, this.totalCart, addedItem.item.CartID);\n//                       } else {\n//                           // clear messages when empty message received\n//                           // this.messages = [];\n//                       }\n//                   });\n//                     }\n//  async ngOnInit() {\n//       this.unsubscribeMe = store.subscribe(() => {\n//           this.user = store.getState().authState.user;\n//       });\n//       // shai says this way the loggin in user will be shown automatically\n//       if (JSON.parse(localStorage.getItem('user'))) {\n//           this.user = store.getState().authState.user;\n//       }\n//        // GETS LAST ORDER\n//       try {\n//         this.orders = await this.myOrdersService.getLastOrderByUser(this.user.uuid);        \n//       }\n//       catch (err) {\n//           this.notify.error(err);\n//       }\n//       // GETS LAST CART (OPEN OR CLOSED)\n//       try {\n//         this.cart = await this.myCartService.getLastCartByUser(this.user.uuid);   \n//       } catch (err) {\n//           this.notify.error(err);\n//       }\n//       // CHECKS IF THE LAST CART IS OPEN (no match for last order)\n//       if (this.orders[0].CartID === this.cart[0].CartID) {this.openCart = false} else {this.openCart = true}\n//       // if there is an open cart -> get this.cart items\n//       if (this.openCart) {\n//         try {\n//           this.items = await this.myItemService.getOpenCartItems(this.cart[0].CartID);      \n//         } catch (err) {\n//           if (!this.items) { \n//             await this.myCartService.deleteCart(this.cart[0].CartID);\n//             this.getLastCart();\n//           };  // if teh cart is empty ot items (aftr removal of an item ) -> delete the cart as well\n//         }\n//       }\n//       this.totalCart = this.myItemService.totalCartPerUser(this.items);\n//   }\n//   ngOnDestroy(): void {\n//       this.unsubscribeMe();\n//   }\n//   public async getLastCart() {\n//     try {\n//       this.cart = await this.myCartService.getLastCartByUser(this.user.uuid);   \n//     } catch (err) {\n//         this.notify.error(err);\n//     }\n//   }\n//   public async deleteItem(id: number) {\n//     try {\n//         const answer = confirm(\"Are you sure you want to remove this item?\");\n//         if (!answer) return;\n//         await this.myItemService.deleteItem(id);\n//         // to delete it from screen in real time\n//         const index = this.items.findIndex(p => p.ItemID === id);\n//           this.items.splice(index, 1);\n//         this.notify.success(\"Item has been removed from cart.\");\n//         this.totalCart = this.myItemService.totalCartPerUser(this.items);\n//         this.myCartService.cartUpdate(false, this.totalCart, this.cart[0].CartID); // mainly used for sending totalCart\n//         // then it send an automatic request to get GET all cart items, and then if it's empty already it's deleted...\n//     }\n//     catch (err) {\n//       // if (!this.cartItems) { await this.myCartService.deleteCart(this.cart[0].CartID)};\n//         this.notify.error(err);\n//     }\n//     this.totalCart = this.myItemService.totalCartPerUser(this.items);\n//     console.log(\"total cart: \" + this.totalCart);\n//     // מה קורה אם מחקתי את הפריט האחרון? צריך למחוק את העגלה?\n//     if (this.items.length === 0) { \n//       this.totalCart = 0; // already above\n//       await this.myCartService.deleteCart(this.cart[0].CartID);\n//       this.myCartService.cartUpdate(true, 0, -1); // notifies produst card that cart is closed\n//           // cartId = -1 --> because it's not used when cartClosed is true\n//       this.getLastCart();\n//     };\n//     // if (this.cartItems.length === 0) {this.deleteCart(this.cart[0].CartID)};\n//   }\n//   // THIS IS THE ACTUAL EMPTY CART ALSO DELETES CART'S ITEMS\n//   public async deleteCart(cartId: number) {\n//     try {\n//       const answer = confirm(\"Are you sure you want to empty your cart?\");\n//       if (!answer) return;\n//       this.emptyCart(cartId);  // delete all cart's items\n//       await this.myCartService.deleteCart(cartId);\n//       this.openCart = false;\n//       this.items = undefined;\n//       this.notify.success(\"Cart has been emptied.\");\n//       this.myCartService.cartUpdate(true, 0, -1); // notifies produst card that cart is closed\n//           // cartId = -1 --> because it's not used when cartClosed is true\n//       this.getLastCart();\n//       // this.myRouter.navigateByUrl(\"/products\");\n//     }\n//     catch (err) {\n//       this.notify.error(err);\n//     }\n//   }\n//   // deletes all the items of a (deleted) cart\n//   async emptyCart(cartId: number) {\n//     try {\n//       await this.myItemService.deleteAllItemsOfCart(cartId);\n//       // this.items = undefined; // i yhik i don't need it\n//       this.myCartService.cartUpdate(true, 0, -1); // notifies produst card that cart is closed\n//           // cartId = -1 --> because it's not used when cartClosed is true\n//     }\n//     catch (err) {\n//       this.notify.error(err);\n//     }\n//   }\n//   order() {\n//     this.myRouter.navigateByUrl(\"/order\");\n//   }\n//   public isNotHome() {\n//     const h = this.myRouter.url.includes(\"/home\");\n//     return !h\n//   }\n//   public isOrder() {\n//     const o = this.myRouter.url.includes(\"/order\");\n//   return o\n//   }\n// }","map":{"version":3,"sources":["C:\\Users\\user\\OneDrive\\מסמכים\\fullstack\\ANGULAR\\SECONDRESTORE\\Front\\src\\app\\components\\cart-area\\cart-menu\\cart-menu.component.ts"],"names":[],"mappings":"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":["import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Unsubscribe } from 'redux';\nimport { Subscription } from 'rxjs';\nimport CartModel from 'src/app/models/cart.model';\nimport OrderModel from 'src/app/models/order.model';\nimport UserModel from 'src/app/models/user.model';\nimport store from 'src/app/redux/store';\nimport { CartsService } from 'src/app/services/carts.service';\nimport { NotifyService } from 'src/app/services/notify.service';\nimport { OrderService } from 'src/app/services/order.service';\nimport { environment } from 'src/environments/environment';\nimport { ItemService } from 'src/app/services/item.service';\nimport ItemModel from 'src/app/models/item.model';\n\n@Component({\n  selector: 'app-cart-menu',\n  templateUrl: './cart-menu.component.html',\n  styleUrls: ['./cart-menu.component.css']\n})\n\n  export class CartMenuComponent implements OnInit, OnDestroy {\n\n  public user: UserModel;\n  private unsubscribeMe: Unsubscribe;\n  public items: ItemModel[];\n  public cart: CartModel[];\n  public totalCart: number = 0;\n  public orders: OrderModel[];\n  public openCart: boolean;\n  public imageUrl = environment.productImagesUrl;\n\n  // for observable\n  private subscription: Subscription;\n\n  searchQuery: string = '';\n\n    constructor( private myActivatedRoute: ActivatedRoute, \n                  private myItemService: ItemService, \n                  private notify: NotifyService, \n                  private myOrdersService: OrderService,\n                  private myCartService: CartsService,\n                  private myRouter: Router,\n                  ) {  \n\n                    // for observable\n                    this.subscription = this.myItemService.getCartObservable().subscribe(async addedItem => {\n                      if (addedItem) {\n                          console.log(addedItem);\n                          // UPDATE\n                          const itemToPush = new ItemModel();\n                          itemToPush.ProductName = addedItem.name;\n                          // needs that because of num/string problems\n                          itemToPush.ItemID = addedItem.item.ItemID;\n                          itemToPush.Quantity = addedItem.item.Quantity;\n                          itemToPush.TotalPrice = addedItem.item.TotalPrice;\n                          itemToPush.imageName = addedItem.item.ProductID + \".jpg\"\n                          if (this.items) {\n                            this.items.push(itemToPush);\n                          } else {\n                            const itemsArray = [itemToPush];\n                            this.items = itemsArray;\n                            this.openCart = true; \n                            this.cart[0].CartID = addedItem.item.CartID;   \n                          }\n                          this.totalCart = this.myItemService.totalCartPerUser(this.items);\n                          this.myCartService.cartUpdate(false, this.totalCart, addedItem.item.CartID);\n                      } else {\n                          // clear messages when empty message received\n                          // this.messages = [];\n                      }\n                  });\n\n                    }\n\n async ngOnInit() {\n      this.unsubscribeMe = store.subscribe(() => {\n          this.user = store.getState().authState.user;\n      });\n\n      // shai says this way the loggin in user will be shown automatically\n      if (JSON.parse(localStorage.getItem('user'))) {\n          this.user = store.getState().authState.user;\n      }\n    \n       // GETS LAST ORDER\n      try {\n        this.orders = await this.myOrdersService.getLastOrderByUser(this.user.uuid);        \n      }\n      catch (err) {\n          this.notify.error(err);\n      }\n\n      // GETS LAST CART (OPEN OR CLOSED)\n      try {\n        this.cart = await this.myCartService.getLastCartByUser(this.user.uuid);   \n      } catch (err) {\n          this.notify.error(err);\n      }\n\n      // CHECKS IF THE LAST CART IS OPEN (no match for last order)\n      if (this.orders[0].CartID === this.cart[0].CartID) {this.openCart = false} else {this.openCart = true}\n\n      // if there is an open cart -> get this.cart items\n      if (this.openCart) {\n        try {\n          this.items = await this.myItemService.getOpenCartItems(this.cart[0].CartID);      \n        } catch (err) {\n          if (!this.items) { \n            await this.myCartService.deleteCart(this.cart[0].CartID);\n            this.getLastCart();\n          };  // if teh cart is empty ot items (aftr removal of an item ) -> delete the cart as well\n        }\n      }\n\n      this.totalCart = this.myItemService.totalCartPerUser(this.items);\n\n  }\n\n  ngOnDestroy(): void {\n      this.unsubscribeMe();\n  }\n\n  public async getLastCart() {\n    try {\n      this.cart = await this.myCartService.getLastCartByUser(this.user.uuid);   \n    } catch (err) {\n        this.notify.error(err);\n    }\n  }\n\n  public async deleteItem(id: number) {\n    try {\n        const answer = confirm(\"Are you sure you want to remove this item?\");\n        if (!answer) return;\n        await this.myItemService.deleteItem(id);\n\n        // to delete it from screen in real time\n        const index = this.items.findIndex(p => p.ItemID === id);\n          this.items.splice(index, 1);\n        this.notify.success(\"Item has been removed from cart.\");\n        this.totalCart = this.myItemService.totalCartPerUser(this.items);\n        this.myCartService.cartUpdate(false, this.totalCart, this.cart[0].CartID); // mainly used for sending totalCart\n\n        // then it send an automatic request to get GET all cart items, and then if it's empty already it's deleted...\n    }\n    catch (err) {\n      // if (!this.cartItems) { await this.myCartService.deleteCart(this.cart[0].CartID)};\n        this.notify.error(err);\n    }\n    this.totalCart = this.myItemService.totalCartPerUser(this.items);\n    console.log(\"total cart: \" + this.totalCart);\n    // מה קורה אם מחקתי את הפריט האחרון? צריך למחוק את העגלה?\n    if (this.items.length === 0) { \n      this.totalCart = 0; // already above\n      await this.myCartService.deleteCart(this.cart[0].CartID);\n      this.myCartService.cartUpdate(true, 0, -1); // notifies produst card that cart is closed\n          // cartId = -1 --> because it's not used when cartClosed is true\n\n      this.getLastCart();\n    };\n    // if (this.cartItems.length === 0) {this.deleteCart(this.cart[0].CartID)};\n  }\n\n  // THIS IS THE ACTUAL EMPTY CART ALSO DELETES CART'S ITEMS\n  public async deleteCart(cartId: number) {\n    try {\n      const answer = confirm(\"Are you sure you want to empty your cart?\");\n      if (!answer) return;\n      this.emptyCart(cartId);  // delete all cart's items\n      await this.myCartService.deleteCart(cartId);\n      this.openCart = false;\n      this.items = undefined;\n      this.notify.success(\"Cart has been emptied.\");\n      this.myCartService.cartUpdate(true, 0, -1); // notifies produst card that cart is closed\n          // cartId = -1 --> because it's not used when cartClosed is true\n\n      this.getLastCart();\n      // this.myRouter.navigateByUrl(\"/products\");\n    }\n    catch (err) {\n      this.notify.error(err);\n    }\n  }\n\n  // deletes all the items of a (deleted) cart\n  async emptyCart(cartId: number) {\n    try {\n      await this.myItemService.deleteAllItemsOfCart(cartId);\n      // this.items = undefined; // i yhik i don't need it\n      this.myCartService.cartUpdate(true, 0, -1); // notifies produst card that cart is closed\n          // cartId = -1 --> because it's not used when cartClosed is true\n\n    }\n    catch (err) {\n      this.notify.error(err);\n    }\n  }\n\n  order() {\n    this.myRouter.navigateByUrl(\"/order\");\n  }\n\n  public isNotHome() {\n    const h = this.myRouter.url.includes(\"/home\");\n    return !h\n  }\n\n\n  public isOrder() {\n    const o = this.myRouter.url.includes(\"/order\");\n  return o\n  }\n\n}\n\n\n\n// import { Component, OnDestroy, OnInit } from '@angular/core';\n// import { ActivatedRoute, Router } from '@angular/router';\n// import { Unsubscribe } from 'redux';\n// import { Subscription } from 'rxjs';\n// import CartModel from 'src/app/models/cart.model';\n// import OrderModel from 'src/app/models/order.model';\n// import UserModel from 'src/app/models/user.model';\n// import store from 'src/app/redux/store';\n// import { CartsService } from 'src/app/services/carts.service';\n// import { NotifyService } from 'src/app/services/notify.service';\n// import { OrderService } from 'src/app/services/order.service';\n// import { environment } from 'src/environments/environment';\n// import { ItemService } from 'src/app/services/item.service';\n// import ItemModel from 'src/app/models/item.model';\n\n// @Component({\n//   selector: 'app-cart-menu',\n//   templateUrl: './cart-menu.component.html',\n//   styleUrls: ['./cart-menu.component.css']\n// })\n\n//   export class CartMenuComponent implements OnInit, OnDestroy {\n\n//   public user: UserModel;\n//   private unsubscribeMe: Unsubscribe;\n//   public items: ItemModel[];\n//   public cart: CartModel[];\n//   public totalCart: number = 0;\n//   public orders: OrderModel[];\n//   public openCart: boolean;\n//   public imageUrl = environment.productImagesUrl;\n\n//   // for observable\n//   private subscription: Subscription;\n\n//   searchQuery: string = '';\n\n//     constructor( private myActivatedRoute: ActivatedRoute, \n//                   private myItemService: ItemService, \n//                   private notify: NotifyService, \n//                   private myOrdersService: OrderService,\n//                   private myCartService: CartsService,\n//                   private myRouter: Router,\n//                   ) {  \n\n//                     // for observable\n//                     this.subscription = this.myItemService.getCartObservable().subscribe(async addedItem => {\n//                       if (addedItem) {\n//                           console.log(addedItem);\n//                           // UPDATE\n//                           const itemToPush = new ItemModel();\n//                           itemToPush.ProductName = addedItem.name;\n//                           // needs that because of num/string problems\n//                           itemToPush.ItemID = addedItem.item.ItemID;\n//                           itemToPush.Quantity = addedItem.item.Quantity;\n//                           itemToPush.TotalPrice = addedItem.item.TotalPrice;\n//                           itemToPush.imageName = addedItem.item.ProductID + \".jpg\"\n//                           if (this.items) {\n//                             this.items.push(itemToPush);\n//                           } else {\n//                             const itemsArray = [itemToPush];\n//                             this.items = itemsArray;\n//                             this.openCart = true; \n//                             this.cart[0].CartID = addedItem.item.CartID;   \n//                           }\n//                           this.totalCart = this.myItemService.totalCartPerUser(this.items);\n//                           this.myCartService.cartUpdate(false, this.totalCart, addedItem.item.CartID);\n//                       } else {\n//                           // clear messages when empty message received\n//                           // this.messages = [];\n//                       }\n//                   });\n\n//                     }\n\n//  async ngOnInit() {\n//       this.unsubscribeMe = store.subscribe(() => {\n//           this.user = store.getState().authState.user;\n//       });\n\n//       // shai says this way the loggin in user will be shown automatically\n//       if (JSON.parse(localStorage.getItem('user'))) {\n//           this.user = store.getState().authState.user;\n//       }\n    \n//        // GETS LAST ORDER\n//       try {\n//         this.orders = await this.myOrdersService.getLastOrderByUser(this.user.uuid);        \n//       }\n//       catch (err) {\n//           this.notify.error(err);\n//       }\n\n//       // GETS LAST CART (OPEN OR CLOSED)\n//       try {\n//         this.cart = await this.myCartService.getLastCartByUser(this.user.uuid);   \n//       } catch (err) {\n//           this.notify.error(err);\n//       }\n\n//       // CHECKS IF THE LAST CART IS OPEN (no match for last order)\n//       if (this.orders[0].CartID === this.cart[0].CartID) {this.openCart = false} else {this.openCart = true}\n\n//       // if there is an open cart -> get this.cart items\n//       if (this.openCart) {\n//         try {\n//           this.items = await this.myItemService.getOpenCartItems(this.cart[0].CartID);      \n//         } catch (err) {\n//           if (!this.items) { \n//             await this.myCartService.deleteCart(this.cart[0].CartID);\n//             this.getLastCart();\n//           };  // if teh cart is empty ot items (aftr removal of an item ) -> delete the cart as well\n//         }\n//       }\n\n//       this.totalCart = this.myItemService.totalCartPerUser(this.items);\n\n//   }\n\n//   ngOnDestroy(): void {\n//       this.unsubscribeMe();\n//   }\n\n//   public async getLastCart() {\n//     try {\n//       this.cart = await this.myCartService.getLastCartByUser(this.user.uuid);   \n//     } catch (err) {\n//         this.notify.error(err);\n//     }\n//   }\n\n//   public async deleteItem(id: number) {\n//     try {\n//         const answer = confirm(\"Are you sure you want to remove this item?\");\n//         if (!answer) return;\n//         await this.myItemService.deleteItem(id);\n\n//         // to delete it from screen in real time\n//         const index = this.items.findIndex(p => p.ItemID === id);\n//           this.items.splice(index, 1);\n//         this.notify.success(\"Item has been removed from cart.\");\n//         this.totalCart = this.myItemService.totalCartPerUser(this.items);\n//         this.myCartService.cartUpdate(false, this.totalCart, this.cart[0].CartID); // mainly used for sending totalCart\n\n//         // then it send an automatic request to get GET all cart items, and then if it's empty already it's deleted...\n//     }\n//     catch (err) {\n//       // if (!this.cartItems) { await this.myCartService.deleteCart(this.cart[0].CartID)};\n//         this.notify.error(err);\n//     }\n//     this.totalCart = this.myItemService.totalCartPerUser(this.items);\n//     console.log(\"total cart: \" + this.totalCart);\n//     // מה קורה אם מחקתי את הפריט האחרון? צריך למחוק את העגלה?\n//     if (this.items.length === 0) { \n//       this.totalCart = 0; // already above\n//       await this.myCartService.deleteCart(this.cart[0].CartID);\n//       this.myCartService.cartUpdate(true, 0, -1); // notifies produst card that cart is closed\n//           // cartId = -1 --> because it's not used when cartClosed is true\n\n//       this.getLastCart();\n//     };\n//     // if (this.cartItems.length === 0) {this.deleteCart(this.cart[0].CartID)};\n//   }\n\n//   // THIS IS THE ACTUAL EMPTY CART ALSO DELETES CART'S ITEMS\n//   public async deleteCart(cartId: number) {\n//     try {\n//       const answer = confirm(\"Are you sure you want to empty your cart?\");\n//       if (!answer) return;\n//       this.emptyCart(cartId);  // delete all cart's items\n//       await this.myCartService.deleteCart(cartId);\n//       this.openCart = false;\n//       this.items = undefined;\n//       this.notify.success(\"Cart has been emptied.\");\n//       this.myCartService.cartUpdate(true, 0, -1); // notifies produst card that cart is closed\n//           // cartId = -1 --> because it's not used when cartClosed is true\n\n//       this.getLastCart();\n//       // this.myRouter.navigateByUrl(\"/products\");\n//     }\n//     catch (err) {\n//       this.notify.error(err);\n//     }\n//   }\n\n//   // deletes all the items of a (deleted) cart\n//   async emptyCart(cartId: number) {\n//     try {\n//       await this.myItemService.deleteAllItemsOfCart(cartId);\n//       // this.items = undefined; // i yhik i don't need it\n//       this.myCartService.cartUpdate(true, 0, -1); // notifies produst card that cart is closed\n//           // cartId = -1 --> because it's not used when cartClosed is true\n\n//     }\n//     catch (err) {\n//       this.notify.error(err);\n//     }\n//   }\n\n//   order() {\n//     this.myRouter.navigateByUrl(\"/order\");\n//   }\n\n//   public isNotHome() {\n//     const h = this.myRouter.url.includes(\"/home\");\n//     return !h\n//   }\n\n\n//   public isOrder() {\n//     const o = this.myRouter.url.includes(\"/order\");\n//   return o\n//   }\n\n// }\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}