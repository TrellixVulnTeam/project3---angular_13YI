{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/user/OneDrive/\\u05DE\\u05E1\\u05DE\\u05DB\\u05D9\\u05DD/fullstack/ANGULAR/SECONDRESTORE/Front/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport store from 'src/app/redux/store';\nimport { environment } from 'src/environments/environment';\nimport { OrderUnitsDialogComponent } from '../../order-area/order-units-dialog/order-units-dialog.component';\nimport CartModel from 'src/app/models/cart.model';\nimport ItemModel from 'src/app/models/item.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"src/app/services/order.service\";\nimport * as i3 from \"src/app/services/item.service\";\nimport * as i4 from \"src/app/services/carts.service\";\nimport * as i5 from \"src/app/services/products.service\";\nimport * as i6 from \"src/app/services/notify.service\";\nimport * as i7 from \"@angular/common\";\n\nfunction ProductCardComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 1);\n    i0.ɵɵlistener(\"click\", function ProductCardComponent_div_0_Template_div_click_0_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return ctx_r2.openDialog();\n    });\n    i0.ɵɵelement(1, \"img\", 2);\n    i0.ɵɵelement(2, \"br\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelement(4, \"br\");\n    i0.ɵɵtext(5);\n    i0.ɵɵpipe(6, \"currency\");\n    i0.ɵɵelement(7, \"br\");\n    i0.ɵɵtext(8, \" Click to add to cart\\n\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"src\", ctx_r0.imageUrl + ctx_r0.product.imageName, i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.product.ProductName, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" Price: \", i0.ɵɵpipeBind2(6, 3, ctx_r0.product.UnitPrice, \"ILS\"), \" \");\n  }\n}\n\nfunction ProductCardComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 1);\n    i0.ɵɵlistener(\"click\", function ProductCardComponent_div_1_Template_div_click_0_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.editProduct();\n    });\n    i0.ɵɵelement(1, \"img\", 2);\n    i0.ɵɵelement(2, \"br\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelement(4, \"br\");\n    i0.ɵɵtext(5);\n    i0.ɵɵpipe(6, \"currency\");\n    i0.ɵɵelement(7, \"br\");\n    i0.ɵɵtext(8, \" Click to edit product\\n\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"src\", ctx_r1.imageUrl + ctx_r1.product.imageName, i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.product.ProductName, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" Price: \", i0.ɵɵpipeBind2(6, 3, ctx_r1.product.UnitPrice, \"ILS\"), \" \");\n  }\n}\n\nexport class ProductCardComponent {\n  constructor(dialog, myOrdersService, myItemService, myCartService, myProductService, notify) {\n    this.dialog = dialog;\n    this.myOrdersService = myOrdersService;\n    this.myItemService = myItemService;\n    this.myCartService = myCartService;\n    this.myProductService = myProductService;\n    this.notify = notify;\n    this.item = new ItemModel();\n    this.newCart = new CartModel();\n    this.imageUrl = environment.productImagesUrl;\n    this.quantity = 1;\n    this.subscription = this.myCartService.getCartOpenObservable().subscribe(message => {\n      if (message.cartClosed) {\n        // this updates all the cards!!! in one subscription i update them all!!\n        this.openCart = false;\n      } else {\n        this.openCart = true;\n        this.cart[0].CartID = message.cartId; // console.log(\"open cart? \" + this.openCart);\n      }\n    });\n  }\n\n  ngOnInit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.unsubscribeMe = store.subscribe(() => {\n        _this.user = store.getState().authState.user;\n      }); // shai says this way the loggin in user will be shown automatically\n\n      if (JSON.parse(localStorage.getItem('user'))) {\n        _this.user = store.getState().authState.user;\n      }\n\n      const uuid = _this.user.uuid;\n\n      try {\n        _this.orders = yield _this.myOrdersService.getLastOrderByUser(uuid);\n      } catch (err) {\n        _this.orders = null;\n        console.log(\"orders: \" + _this.orders);\n\n        _this.notify.error(err);\n      } // GETS LAST CART (OPEN OR CLOSED)\n\n\n      try {\n        _this.cart = yield _this.myCartService.getLastCartByUser(uuid);\n      } catch (err) {\n        _this.cart = null;\n        console.log(\"cart: \" + _this.cart);\n\n        _this.notify.error(err);\n      } // CHECKS IF THE LAST CART IS OPEN (no match for last order)\n      // first if -> for first time user, when there are no orders or carts in db. otherwise it crashes\n\n\n      if (_this.orders === null || _this.cart === null) {\n        _this.openCart = false;\n      } else if (_this.orders[0].CartID === _this.cart[0].CartID) {\n        _this.openCart = false;\n      } else {\n        _this.openCart = true;\n      }\n\n      console.log(\"open cart: \");\n    })();\n  }\n\n  openDialog() {\n    var _this2 = this;\n\n    // console.log(this.product.ProductName)\n    const dialogRef = this.dialog.open(OrderUnitsDialogComponent, {\n      data: {\n        name: this.product.ProductName,\n        imageName: this.product.imageName,\n        quantity: this.quantity\n      }\n    });\n    dialogRef.afterClosed().subscribe( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (result) {\n        _this2.quantity = result;\n\n        if (_this2.quantity) {\n          _this2.addToCart();\n        }\n      });\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n  }\n\n  addToCart() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this3.openCart === false) {\n        // if there is no open cart -> create a new cart\n        _this3.newCart.UserUUID = _this3.user.uuid;\n        _this3.newCart.Date = new Date().toString();\n\n        try {\n          yield _this3.myCartService.addCart(_this3.newCart);\n\n          _this3.notify.success(\"A new cart was created.\");\n        } catch (err) {\n          _this3.notify.error(err);\n        }\n\n        try {\n          // then bring in the new created cart. is there a shorter way than to resend request??? maybe with insertId???\n          // still sends the old cart's id beacuse the redux doesn;t render!!!!!!\n          _this3.cart = yield _this3.myCartService.getLastCartByUser(_this3.user.uuid);\n        } catch (err) {\n          _this3.notify.error(err);\n        }\n      }\n\n      _this3.item.ProductID = _this3.product.ProductID;\n      _this3.item.TotalPrice = _this3.product.UnitPrice * _this3.quantity;\n      _this3.item.Quantity = _this3.quantity;\n      _this3.item.CartID = _this3.cart[0].CartID;\n\n      try {\n        const addedItem = yield _this3.myItemService.addCartItem(_this3.item);\n\n        _this3.notify.success(\"Product has been added to your cart.\");\n\n        _this3.item.ItemID = addedItem.ItemID; // observable function!!!\n\n        _this3.myItemService.addToMenuCart(_this3.item, _this3.product.ProductName);\n      } catch (err) {\n        _this3.notify.error(err);\n      }\n    })();\n  }\n\n  editProduct() {\n    this.myProductService.adminProductUpdate(this.product);\n  }\n\n  ngOnDestroy() {\n    this.unsubscribeMe();\n  }\n\n}\n\nProductCardComponent.ɵfac = function ProductCardComponent_Factory(t) {\n  return new (t || ProductCardComponent)(i0.ɵɵdirectiveInject(i1.MatDialog), i0.ɵɵdirectiveInject(i2.OrderService), i0.ɵɵdirectiveInject(i3.ItemService), i0.ɵɵdirectiveInject(i4.CartsService), i0.ɵɵdirectiveInject(i5.ProductsService), i0.ɵɵdirectiveInject(i6.NotifyService));\n};\n\nProductCardComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ProductCardComponent,\n  selectors: [[\"app-product-card\"]],\n  inputs: {\n    product: \"product\"\n  },\n  decls: 2,\n  vars: 2,\n  consts: [[\"class\", \"box\", 3, \"click\", 4, \"ngIf\"], [1, \"box\", 3, \"click\"], [3, \"src\"]],\n  template: function ProductCardComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, ProductCardComponent_div_0_Template, 9, 6, \"div\", 0);\n      i0.ɵɵtemplate(1, ProductCardComponent_div_1_Template, 9, 6, \"div\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", !ctx.user.isAdmin);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.user.isAdmin);\n    }\n  },\n  directives: [i7.NgIf],\n  pipes: [i7.CurrencyPipe],\n  styles: [\"div[_ngcontent-%COMP%] {\\r\\n\\twidth: 250px;\\r\\n    height: 300px;\\r\\n    text-align: center;\\r\\n    align-items: center;\\r\\n    background-color: white;\\r\\n    padding-right: 0;\\r\\n}\\r\\n\\r\\nimg[_ngcontent-%COMP%] {\\r\\n    width: 250px;\\r\\n    height: 300px;\\r\\n    border-radius: 10px;\\r\\n    vertical-align: middle;\\r\\n}\\r\\n\\r\\na[_ngcontent-%COMP%] {\\r\\n    margin-left: auto;\\r\\n}\\r\\n\\r\\ndiv[_ngcontent-%COMP%]:hover {\\r\\n    border-radius: 10px;\\r\\n    border: 3px solid lightblue;\\r\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInByb2R1Y3QtY2FyZC5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0NBQ0MsWUFBWTtJQUNULGFBQWE7SUFDYixrQkFBa0I7SUFDbEIsbUJBQW1CO0lBQ25CLHVCQUF1QjtJQUN2QixnQkFBZ0I7QUFDcEI7O0FBRUE7SUFDSSxZQUFZO0lBQ1osYUFBYTtJQUNiLG1CQUFtQjtJQUNuQixzQkFBc0I7QUFDMUI7O0FBRUE7SUFDSSxpQkFBaUI7QUFDckI7O0FBRUE7SUFDSSxtQkFBbUI7SUFDbkIsMkJBQTJCO0FBQy9CIiwiZmlsZSI6InByb2R1Y3QtY2FyZC5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiZGl2IHtcclxuXHR3aWR0aDogMjUwcHg7XHJcbiAgICBoZWlnaHQ6IDMwMHB4O1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xyXG4gICAgcGFkZGluZy1yaWdodDogMDtcclxufVxyXG5cclxuaW1nIHtcclxuICAgIHdpZHRoOiAyNTBweDtcclxuICAgIGhlaWdodDogMzAwcHg7XHJcbiAgICBib3JkZXItcmFkaXVzOiAxMHB4O1xyXG4gICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcclxufVxyXG5cclxuYSB7XHJcbiAgICBtYXJnaW4tbGVmdDogYXV0bztcclxufVxyXG5cclxuZGl2OmhvdmVyIHtcclxuICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XHJcbiAgICBib3JkZXI6IDNweCBzb2xpZCBsaWdodGJsdWU7XHJcbn0iXX0= */\"]\n});","map":{"version":3,"sources":["C:\\Users\\user\\OneDrive\\מסמכים\\fullstack\\ANGULAR\\SECONDRESTORE\\Front\\src\\app\\components\\products-area\\product-card\\product-card.component.ts","C:\\Users\\user\\OneDrive\\מסמכים\\fullstack\\ANGULAR\\SECONDRESTORE\\Front\\src\\app\\components\\products-area\\product-card\\product-card.component.html"],"names":[],"mappings":"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","sourcesContent":["import { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { Unsubscribe } from 'redux';\nimport ProductModel from 'src/app/models/product.model';\nimport UserModel from 'src/app/models/user.model';\nimport store from 'src/app/redux/store';\nimport { NotifyService } from 'src/app/services/notify.service';\nimport { environment } from 'src/environments/environment';\nimport { OrderUnitsDialogComponent } from '../../order-area/order-units-dialog/order-units-dialog.component';\nimport { CartsService } from 'src/app/services/carts.service';\nimport CartModel from 'src/app/models/cart.model';\nimport OrderModel from 'src/app/models/order.model';\nimport { OrderService } from 'src/app/services/order.service';\nimport { ItemService } from 'src/app/services/item.service';\nimport ItemModel from 'src/app/models/item.model';\nimport { Subscription } from 'rxjs';\nimport { ProductsService } from 'src/app/services/products.service';\n\nexport interface DialogData {\n    imageName: any;\n    name: string;\n    quantity: number;\n  }\n\n\n@Component({\n    selector: 'app-product-card',\n    templateUrl: './product-card.component.html',\n    styleUrls: ['./product-card.component.css']\n})\nexport class ProductCardComponent implements OnInit, OnDestroy {\n\n    @Input()\n    public product: ProductModel;\n\n    public item = new ItemModel();\n    public user: UserModel;\n    private cart: CartModel[];\n    private orders: OrderModel[];\n    private openCart: boolean;\n    public newCart  = new CartModel();\n\n    private subscription: Subscription;\n\n    public imageUrl = environment.productImagesUrl;\n    public quantity: number = 1;\n    // public name: string;\n    private unsubscribeMe: Unsubscribe;\n\n\n\n    constructor(\n        public dialog : MatDialog, \n        private myOrdersService: OrderService,\n        private myItemService: ItemService, \n        private myCartService: CartsService,\n        private myProductService: ProductsService,\n        private notify: NotifyService, \n    ) {\n        this.subscription = this.myCartService.getCartOpenObservable().subscribe(message => {\n            if (message.cartClosed) {\n                // this updates all the cards!!! in one subscription i update them all!!\n                this.openCart = false;\n            } else {\n                this.openCart = true;\n                this.cart[0].CartID = message.cartId;\n                // console.log(\"open cart? \" + this.openCart);\n            }\n            \n        })\n    }\n\n        async ngOnInit() {\n            this.unsubscribeMe = store.subscribe(() => {\n                this.user = store.getState().authState.user;\n            });\n      \n            // shai says this way the loggin in user will be shown automatically\n            if (JSON.parse(localStorage.getItem('user'))) {\n                this.user = store.getState().authState.user;\n            }\n\n            const uuid = this.user.uuid;\n\n            try {\n                this.orders = await this.myOrdersService.getLastOrderByUser(uuid);        }\n              catch (err) {\n                  this.orders = null;\n                  console.log(\"orders: \" + this.orders)\n                  this.notify.error(err);\n              }\n          \n              // GETS LAST CART (OPEN OR CLOSED)\n            try {\n                this.cart = await this.myCartService.getLastCartByUser(uuid);   \n            } catch (err) {\n                this.cart = null;\n                console.log(\"cart: \" + this.cart);\n                this.notify.error(err);\n            }\n          \n              // CHECKS IF THE LAST CART IS OPEN (no match for last order)\n              // first if -> for first time user, when there are no orders or carts in db. otherwise it crashes\n            if (this.orders === null || this.cart === null) {\n                this.openCart = false;\n            } else if (this.orders[0].CartID === this.cart[0].CartID) {\n                this.openCart = false\n            } else {\n                this.openCart = true\n            }    \n            console.log(\"open cart: \");\n        }\n\n    openDialog() {\n        // console.log(this.product.ProductName)\n        const dialogRef = this.dialog.open(OrderUnitsDialogComponent,  {\n            data: {\n                name: this.product.ProductName,\n                imageName: this.product.imageName,\n                quantity: this.quantity\n            }\n        });\n        dialogRef.afterClosed().subscribe(async result => {\n            this.quantity = result;\n            if (this.quantity) {\n                this.addToCart();\n            }\n        });\n    }\n\n    async addToCart() {\n        if (this.openCart === false) { // if there is no open cart -> create a new cart\n            this.newCart.UserUUID = this.user.uuid;\n            this.newCart.Date = new Date().toString();\n            try {\n                    await this.myCartService.addCart(this.newCart);\n                    this.notify.success(\"A new cart was created.\");\n                }\n                catch(err) {\n                    this.notify.error(err);\n            }\n            try {       // then bring in the new created cart. is there a shorter way than to resend request??? maybe with insertId???\n                // still sends the old cart's id beacuse the redux doesn;t render!!!!!!\n                    this.cart = await this.myCartService.getLastCartByUser(this.user.uuid);   \n                } catch (err) {\n                    this.notify.error(err);\n            }\n        }\n\n        this.item.ProductID = this.product.ProductID;\n        this.item.TotalPrice = this.product.UnitPrice*this.quantity;\n        this.item.Quantity = this.quantity;\n        this.item.CartID = this.cart[0].CartID;\n        try {\n            const addedItem = await this.myItemService.addCartItem(this.item);\n            this.notify.success(\"Product has been added to your cart.\");\n            this.item.ItemID = addedItem.ItemID;\n            // observable function!!!\n            this.myItemService.addToMenuCart(this.item, this.product.ProductName);\n        }\n        catch(err) {\n            this.notify.error(err);\n        }\n    }\n\n    editProduct() {\n        this.myProductService.adminProductUpdate(this.product);\n    }\n    \n    ngOnDestroy(): void {\n        this.unsubscribeMe();\n    }\n\n}\n","<div *ngIf=\"!user.isAdmin\" class=\"box\" (click)=\"openDialog()\">\n        <img [src]=\"imageUrl + product.imageName\" />\n        <br/>\n        {{product.ProductName}}\n        <br />\n        Price: {{product.UnitPrice | currency:\"ILS\"}}\n        <br />\n        Click to add to cart\n</div>\n\n<div *ngIf=\"user.isAdmin\" class=\"box\" (click)=\"editProduct()\">\n        <img [src]=\"imageUrl + product.imageName\" />\n        <br/>\n        {{product.ProductName}}\n        <br />\n        Price: {{product.UnitPrice | currency:\"ILS\"}}\n        <br />\n        Click to edit product\n</div>\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}