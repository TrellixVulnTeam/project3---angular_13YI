{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/user/OneDrive/\\u05DE\\u05E1\\u05DE\\u05DB\\u05D9\\u05DD/fullstack/ANGULAR/SECONDRESTORE/Front/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { Subject } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport ItemModel from '../models/item.model';\nimport { itemAddedAction, itemDeletedAction, itemsDownloadedAction, itemsofCartDeletedAction } from '../redux/item-state';\nimport store from '../redux/store';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./timezone.service\";\nexport class ItemService {\n  constructor(http, tz_helper) {\n    this.http = http;\n    this.tz_helper = tz_helper; // observable subject\n\n    this.subject = new Subject();\n  }\n\n  addToMenuCart(item, name) {\n    console.log(\"item in cart srvice:\");\n    console.log(name);\n    this.subject.next({\n      item: item,\n      name: name\n    });\n  }\n\n  getCartObservable() {\n    return this.subject.asObservable();\n  }\n\n  totalCartPerUser(items) {\n    let totalCart = 0;\n\n    if (items) {\n      for (let item of items) {\n        totalCart += item.TotalPrice; // * product.price\n      }\n    }\n\n    return totalCart;\n  } // Get carts per user: \n\n\n  getOpenCartItems(CartID) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      if (store.getState().itemState.items.filter(p => p.CartID === CartID).length === 0) {\n        const items = yield _this.http.get(environment.itemsUrl + CartID).toPromise(); // Iterate over all employees and convert timezone to my local timezone\n        //  for (let cartItem of cartItems) {\n        //   cartItem.date = this.tz_helper.convertTZ(cartItem.date).toString(); \n        // }\n\n        store.dispatch(itemsDownloadedAction(items));\n      } // NEED TO UNDERSTAND IF THAT IS CORRECT\n\n\n      const items = store.getState().itemState.items.filter(p => p.CartID === CartID);\n      return items;\n    })();\n  } // // Delete item: \n\n\n  deleteItem(id) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this2.http.delete(environment.itemsUrl + id).toPromise();\n      store.dispatch(itemDeletedAction(id));\n    })();\n  } // // Delete all items of a carts: \n\n\n  deleteAllItemsOfCart(cartId) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this3.http.delete(environment.itemsUrl + \"all/\" + cartId).toPromise();\n      store.dispatch(itemsofCartDeletedAction(cartId)); // I added this action, I hope it's fine\n    })();\n  } // // i use \"delete\" and not \"patch\" because this way I can send\n  // public async patchCartItemsToClose(cart: CartItemModel) {\n  //   const myFormData: FormData = CartItemModel.convertToFormData(cart);\n  //   const updatedCart = await this.http.patch<CartItemModel>(environment.cartItemsUrl + \"all/\" + cart.userUUID, myFormData).toPromise();\n  //   store.dispatch(cartItemUpdatedAction(updatedCart));\n  //   return updatedCart;\n  // }\n  // Add product: \n\n\n  addCartItem(item) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      const myFormData = ItemModel.convertToFormData(item);\n      const addedItem = yield _this4.http.post(environment.itemsUrl, myFormData).toPromise();\n      store.dispatch(itemAddedAction(addedItem));\n      return addedItem;\n    })();\n  }\n\n}\n\nItemService.ɵfac = function ItemService_Factory(t) {\n  return new (t || ItemService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.TimezoneService));\n};\n\nItemService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ItemService,\n  factory: ItemService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:\\Users\\user\\OneDrive\\מסמכים\\fullstack\\ANGULAR\\SECONDRESTORE\\Front\\src\\app\\services\\item.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport ItemModel from '../models/item.model';\nimport { itemAddedAction, itemDeletedAction, itemsDownloadedAction, itemsofCartDeletedAction } from '../redux/item-state';\nimport store from '../redux/store';\nimport { TimezoneService } from './timezone.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ItemService {\n\n  // observable subject\n  private subject = new Subject<any>();\n\n\n  constructor(private http: HttpClient, private tz_helper: TimezoneService) { }\n\n  addToMenuCart(item: ItemModel, name: string) {\n    console.log(\"item in cart srvice:\")\n    console.log(name);\n    this.subject.next({\n        item: item,\n        name: name\n    });\n  }\n\n  getCartObservable(): Observable<any> {\n    return this.subject.asObservable();\n  }\n\n  public totalCartPerUser(items: ItemModel[]): number {\n    let totalCart = 0;\n    if (items) {\n        for (let item of items) {\n            totalCart += item.TotalPrice; // * product.price\n        }\n    }\n    return totalCart;\n  }\n\n  // Get carts per user: \n  public async getOpenCartItems(CartID: number) {\n    if (store.getState().itemState.items.filter(p => p.CartID === CartID).length === 0) {\n        const items = await this.http.get<ItemModel[]>(environment.itemsUrl  + CartID).toPromise();\n         // Iterate over all employees and convert timezone to my local timezone\n        //  for (let cartItem of cartItems) {\n        //   cartItem.date = this.tz_helper.convertTZ(cartItem.date).toString(); \n      // }\n        store.dispatch(itemsDownloadedAction(items));\n    }\n    // NEED TO UNDERSTAND IF THAT IS CORRECT\n    const items = store.getState().itemState.items.filter(p => p.CartID === CartID);\n    return items;\n  }\n\n    // // Delete item: \n  public async deleteItem(id: number) {\n    await this.http.delete(environment.itemsUrl + id).toPromise();\n    store.dispatch(itemDeletedAction(id));\n  }\n\n    // // Delete all items of a carts: \n  public async deleteAllItemsOfCart(cartId: number) {\n    await this.http.delete(environment.itemsUrl + \"all/\" + cartId).toPromise();\n    store.dispatch(itemsofCartDeletedAction(cartId)); // I added this action, I hope it's fine\n  }\n\n    // // i use \"delete\" and not \"patch\" because this way I can send\n    // public async patchCartItemsToClose(cart: CartItemModel) {\n    //   const myFormData: FormData = CartItemModel.convertToFormData(cart);\n    //   const updatedCart = await this.http.patch<CartItemModel>(environment.cartItemsUrl + \"all/\" + cart.userUUID, myFormData).toPromise();\n    //   store.dispatch(cartItemUpdatedAction(updatedCart));\n    //   return updatedCart;\n    // }\n\n    // Add product: \n    public async addCartItem(item: ItemModel) {\n      const myFormData: FormData = ItemModel.convertToFormData(item);\n      const addedItem = await this.http.post<ItemModel>(environment.itemsUrl, myFormData).toPromise();\n      store.dispatch(itemAddedAction(addedItem));\n      return addedItem;\n  }\n\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}